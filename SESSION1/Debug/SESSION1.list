
SESSION1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd0  08005bd0  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08005bd0  08005bd0  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bd0  08005bd0  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000009c  08005c74  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005c74  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3cd  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002328  00000000  00000000  0002d492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0002f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  000305f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001897f  00000000  00000000  00031310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114db  00000000  00000000  00049c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3c5  00000000  00000000  0005b16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e652f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e34  00000000  00000000  000e6580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005adc 	.word	0x08005adc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08005adc 	.word	0x08005adc

0800014c <resetCountValue>:
}*/
int led1 = RED_TIME;
int led2 = GREEN_TIME;
int state1 = AUTO_RED;
int state2 = AUTO_GREEN;
void resetCountValue() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

	led1 = red_value;
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <resetCountValue+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a08      	ldr	r2, [pc, #32]	; (8000178 <resetCountValue+0x2c>)
 8000156:	6013      	str	r3, [r2, #0]
	led2 = green_value;
 8000158:	4b08      	ldr	r3, [pc, #32]	; (800017c <resetCountValue+0x30>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a08      	ldr	r2, [pc, #32]	; (8000180 <resetCountValue+0x34>)
 800015e:	6013      	str	r3, [r2, #0]
	state1 = AUTO_RED;
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <resetCountValue+0x38>)
 8000162:	2202      	movs	r2, #2
 8000164:	601a      	str	r2, [r3, #0]
	state2 = AUTO_GREEN;
 8000166:	4b08      	ldr	r3, [pc, #32]	; (8000188 <resetCountValue+0x3c>)
 8000168:	2203      	movs	r2, #3
 800016a:	601a      	str	r2, [r3, #0]


}
 800016c:	bf00      	nop
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr
 8000174:	2000010c 	.word	0x2000010c
 8000178:	20000000 	.word	0x20000000
 800017c:	20000114 	.word	0x20000114
 8000180:	20000004 	.word	0x20000004
 8000184:	20000008 	.word	0x20000008
 8000188:	2000000c 	.word	0x2000000c

0800018c <mode1Counter>:
char str1[20];
char str2[20];
void mode1Counter() {
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0

	led1--;
 8000190:	4b84      	ldr	r3, [pc, #528]	; (80003a4 <mode1Counter+0x218>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	3b01      	subs	r3, #1
 8000196:	4a83      	ldr	r2, [pc, #524]	; (80003a4 <mode1Counter+0x218>)
 8000198:	6013      	str	r3, [r2, #0]
	led2--;
 800019a:	4b83      	ldr	r3, [pc, #524]	; (80003a8 <mode1Counter+0x21c>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	3b01      	subs	r3, #1
 80001a0:	4a81      	ldr	r2, [pc, #516]	; (80003a8 <mode1Counter+0x21c>)
 80001a2:	6013      	str	r3, [r2, #0]

	switch (state1) {
 80001a4:	4b81      	ldr	r3, [pc, #516]	; (80003ac <mode1Counter+0x220>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	2b04      	cmp	r3, #4
 80001aa:	d02e      	beq.n	800020a <mode1Counter+0x7e>
 80001ac:	2b04      	cmp	r3, #4
 80001ae:	dc6d      	bgt.n	800028c <mode1Counter+0x100>
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	d002      	beq.n	80001ba <mode1Counter+0x2e>
 80001b4:	2b03      	cmp	r3, #3
 80001b6:	d04c      	beq.n	8000252 <mode1Counter+0xc6>
			//HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);

		}
		break;
	default:
		break;
 80001b8:	e068      	b.n	800028c <mode1Counter+0x100>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c0:	487b      	ldr	r0, [pc, #492]	; (80003b0 <mode1Counter+0x224>)
 80001c2:	f001 fdfc 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80001c6:	2201      	movs	r2, #1
 80001c8:	2110      	movs	r1, #16
 80001ca:	4879      	ldr	r0, [pc, #484]	; (80003b0 <mode1Counter+0x224>)
 80001cc:	f001 fdf7 	bl	8001dbe <HAL_GPIO_WritePin>
		strcpy(str1,"RED:");
 80001d0:	4b78      	ldr	r3, [pc, #480]	; (80003b4 <mode1Counter+0x228>)
 80001d2:	4a79      	ldr	r2, [pc, #484]	; (80003b8 <mode1Counter+0x22c>)
 80001d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001d8:	6018      	str	r0, [r3, #0]
 80001da:	3304      	adds	r3, #4
 80001dc:	7019      	strb	r1, [r3, #0]
		if (led1 <= 0) {
 80001de:	4b71      	ldr	r3, [pc, #452]	; (80003a4 <mode1Counter+0x218>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	dc54      	bgt.n	8000290 <mode1Counter+0x104>
			led1 = green_value;
 80001e6:	4b75      	ldr	r3, [pc, #468]	; (80003bc <mode1Counter+0x230>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a6e      	ldr	r2, [pc, #440]	; (80003a4 <mode1Counter+0x218>)
 80001ec:	6013      	str	r3, [r2, #0]
			state1 = AUTO_GREEN;
 80001ee:	4b6f      	ldr	r3, [pc, #444]	; (80003ac <mode1Counter+0x220>)
 80001f0:	2203      	movs	r2, #3
 80001f2:	601a      	str	r2, [r3, #0]
			strcpy(str1,"GREEN:");
 80001f4:	4b6f      	ldr	r3, [pc, #444]	; (80003b4 <mode1Counter+0x228>)
 80001f6:	4a72      	ldr	r2, [pc, #456]	; (80003c0 <mode1Counter+0x234>)
 80001f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001fc:	6018      	str	r0, [r3, #0]
 80001fe:	3304      	adds	r3, #4
 8000200:	8019      	strh	r1, [r3, #0]
 8000202:	3302      	adds	r3, #2
 8000204:	0c0a      	lsrs	r2, r1, #16
 8000206:	701a      	strb	r2, [r3, #0]
		break;
 8000208:	e042      	b.n	8000290 <mode1Counter+0x104>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 800020a:	2201      	movs	r2, #1
 800020c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000210:	4867      	ldr	r0, [pc, #412]	; (80003b0 <mode1Counter+0x224>)
 8000212:	f001 fdd4 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2110      	movs	r1, #16
 800021a:	4865      	ldr	r0, [pc, #404]	; (80003b0 <mode1Counter+0x224>)
 800021c:	f001 fdcf 	bl	8001dbe <HAL_GPIO_WritePin>
		strcpy(str1,"YELLOW:");
 8000220:	4b64      	ldr	r3, [pc, #400]	; (80003b4 <mode1Counter+0x228>)
 8000222:	4a68      	ldr	r2, [pc, #416]	; (80003c4 <mode1Counter+0x238>)
 8000224:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000228:	e883 0003 	stmia.w	r3, {r0, r1}
		if (led1 <= 0) {
 800022c:	4b5d      	ldr	r3, [pc, #372]	; (80003a4 <mode1Counter+0x218>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	dc2f      	bgt.n	8000294 <mode1Counter+0x108>
			led1 = red_value;
 8000234:	4b64      	ldr	r3, [pc, #400]	; (80003c8 <mode1Counter+0x23c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a5a      	ldr	r2, [pc, #360]	; (80003a4 <mode1Counter+0x218>)
 800023a:	6013      	str	r3, [r2, #0]
	 		state1 = AUTO_RED;
 800023c:	4b5b      	ldr	r3, [pc, #364]	; (80003ac <mode1Counter+0x220>)
 800023e:	2202      	movs	r2, #2
 8000240:	601a      	str	r2, [r3, #0]
	 		strcpy(str1,"RED:");
 8000242:	4b5c      	ldr	r3, [pc, #368]	; (80003b4 <mode1Counter+0x228>)
 8000244:	4a5c      	ldr	r2, [pc, #368]	; (80003b8 <mode1Counter+0x22c>)
 8000246:	e892 0003 	ldmia.w	r2, {r0, r1}
 800024a:	6018      	str	r0, [r3, #0]
 800024c:	3304      	adds	r3, #4
 800024e:	7019      	strb	r1, [r3, #0]
		break;
 8000250:	e020      	b.n	8000294 <mode1Counter+0x108>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000258:	4855      	ldr	r0, [pc, #340]	; (80003b0 <mode1Counter+0x224>)
 800025a:	f001 fdb0 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 800025e:	2201      	movs	r2, #1
 8000260:	2110      	movs	r1, #16
 8000262:	4853      	ldr	r0, [pc, #332]	; (80003b0 <mode1Counter+0x224>)
 8000264:	f001 fdab 	bl	8001dbe <HAL_GPIO_WritePin>
		if (led1 <= 0) {
 8000268:	4b4e      	ldr	r3, [pc, #312]	; (80003a4 <mode1Counter+0x218>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	dc13      	bgt.n	8000298 <mode1Counter+0x10c>
			led1 = yellow_value;
 8000270:	4b56      	ldr	r3, [pc, #344]	; (80003cc <mode1Counter+0x240>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a4b      	ldr	r2, [pc, #300]	; (80003a4 <mode1Counter+0x218>)
 8000276:	6013      	str	r3, [r2, #0]
			state1 = AUTO_YELLOW;
 8000278:	4b4c      	ldr	r3, [pc, #304]	; (80003ac <mode1Counter+0x220>)
 800027a:	2204      	movs	r2, #4
 800027c:	601a      	str	r2, [r3, #0]
			strcpy(str1,"YELLOW:");
 800027e:	4b4d      	ldr	r3, [pc, #308]	; (80003b4 <mode1Counter+0x228>)
 8000280:	4a50      	ldr	r2, [pc, #320]	; (80003c4 <mode1Counter+0x238>)
 8000282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000286:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 800028a:	e005      	b.n	8000298 <mode1Counter+0x10c>
		break;
 800028c:	bf00      	nop
 800028e:	e004      	b.n	800029a <mode1Counter+0x10e>
		break;
 8000290:	bf00      	nop
 8000292:	e002      	b.n	800029a <mode1Counter+0x10e>
		break;
 8000294:	bf00      	nop
 8000296:	e000      	b.n	800029a <mode1Counter+0x10e>
		break;
 8000298:	bf00      	nop
	}
	switch (state2) {
 800029a:	4b4d      	ldr	r3, [pc, #308]	; (80003d0 <mode1Counter+0x244>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b04      	cmp	r3, #4
 80002a0:	d02d      	beq.n	80002fe <mode1Counter+0x172>
 80002a2:	2b04      	cmp	r3, #4
 80002a4:	dc74      	bgt.n	8000390 <mode1Counter+0x204>
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d002      	beq.n	80002b0 <mode1Counter+0x124>
 80002aa:	2b03      	cmp	r3, #3
 80002ac:	d04a      	beq.n	8000344 <mode1Counter+0x1b8>
					//HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);

				}
				break;
			default:
				break;
 80002ae:	e06f      	b.n	8000390 <mode1Counter+0x204>
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2120      	movs	r1, #32
 80002b4:	483e      	ldr	r0, [pc, #248]	; (80003b0 <mode1Counter+0x224>)
 80002b6:	f001 fd82 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2108      	movs	r1, #8
 80002be:	483c      	ldr	r0, [pc, #240]	; (80003b0 <mode1Counter+0x224>)
 80002c0:	f001 fd7d 	bl	8001dbe <HAL_GPIO_WritePin>
				strcpy(str2,"RED:");
 80002c4:	4b43      	ldr	r3, [pc, #268]	; (80003d4 <mode1Counter+0x248>)
 80002c6:	4a3c      	ldr	r2, [pc, #240]	; (80003b8 <mode1Counter+0x22c>)
 80002c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002cc:	6018      	str	r0, [r3, #0]
 80002ce:	3304      	adds	r3, #4
 80002d0:	7019      	strb	r1, [r3, #0]
				if (led2 <= 0) {
 80002d2:	4b35      	ldr	r3, [pc, #212]	; (80003a8 <mode1Counter+0x21c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	dc5c      	bgt.n	8000394 <mode1Counter+0x208>
					led2 = green_value;
 80002da:	4b38      	ldr	r3, [pc, #224]	; (80003bc <mode1Counter+0x230>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a32      	ldr	r2, [pc, #200]	; (80003a8 <mode1Counter+0x21c>)
 80002e0:	6013      	str	r3, [r2, #0]
					state2 = AUTO_GREEN;
 80002e2:	4b3b      	ldr	r3, [pc, #236]	; (80003d0 <mode1Counter+0x244>)
 80002e4:	2203      	movs	r2, #3
 80002e6:	601a      	str	r2, [r3, #0]
					strcpy(str2,"GREEN:");
 80002e8:	4b3a      	ldr	r3, [pc, #232]	; (80003d4 <mode1Counter+0x248>)
 80002ea:	4a35      	ldr	r2, [pc, #212]	; (80003c0 <mode1Counter+0x234>)
 80002ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f0:	6018      	str	r0, [r3, #0]
 80002f2:	3304      	adds	r3, #4
 80002f4:	8019      	strh	r1, [r3, #0]
 80002f6:	3302      	adds	r3, #2
 80002f8:	0c0a      	lsrs	r2, r1, #16
 80002fa:	701a      	strb	r2, [r3, #0]
				break;
 80002fc:	e04a      	b.n	8000394 <mode1Counter+0x208>
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2120      	movs	r1, #32
 8000302:	482b      	ldr	r0, [pc, #172]	; (80003b0 <mode1Counter+0x224>)
 8000304:	f001 fd5b 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2108      	movs	r1, #8
 800030c:	4828      	ldr	r0, [pc, #160]	; (80003b0 <mode1Counter+0x224>)
 800030e:	f001 fd56 	bl	8001dbe <HAL_GPIO_WritePin>
				strcpy(str2,"YELLOW:");
 8000312:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <mode1Counter+0x248>)
 8000314:	4a2b      	ldr	r2, [pc, #172]	; (80003c4 <mode1Counter+0x238>)
 8000316:	e892 0003 	ldmia.w	r2, {r0, r1}
 800031a:	e883 0003 	stmia.w	r3, {r0, r1}
				if (led2 <= 0) {
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <mode1Counter+0x21c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	dc38      	bgt.n	8000398 <mode1Counter+0x20c>
					led2 = red_value;
 8000326:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <mode1Counter+0x23c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a1f      	ldr	r2, [pc, #124]	; (80003a8 <mode1Counter+0x21c>)
 800032c:	6013      	str	r3, [r2, #0]
					state2 = AUTO_RED;
 800032e:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <mode1Counter+0x244>)
 8000330:	2202      	movs	r2, #2
 8000332:	601a      	str	r2, [r3, #0]
					strcpy(str2,"RED:");
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <mode1Counter+0x248>)
 8000336:	4a20      	ldr	r2, [pc, #128]	; (80003b8 <mode1Counter+0x22c>)
 8000338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800033c:	6018      	str	r0, [r3, #0]
 800033e:	3304      	adds	r3, #4
 8000340:	7019      	strb	r1, [r3, #0]
				break;
 8000342:	e029      	b.n	8000398 <mode1Counter+0x20c>
				HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2120      	movs	r1, #32
 8000348:	4819      	ldr	r0, [pc, #100]	; (80003b0 <mode1Counter+0x224>)
 800034a:	f001 fd38 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 800034e:	2201      	movs	r2, #1
 8000350:	2108      	movs	r1, #8
 8000352:	4817      	ldr	r0, [pc, #92]	; (80003b0 <mode1Counter+0x224>)
 8000354:	f001 fd33 	bl	8001dbe <HAL_GPIO_WritePin>
				strcpy(str2,"GREEN:");
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <mode1Counter+0x248>)
 800035a:	4a19      	ldr	r2, [pc, #100]	; (80003c0 <mode1Counter+0x234>)
 800035c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000360:	6018      	str	r0, [r3, #0]
 8000362:	3304      	adds	r3, #4
 8000364:	8019      	strh	r1, [r3, #0]
 8000366:	3302      	adds	r3, #2
 8000368:	0c0a      	lsrs	r2, r1, #16
 800036a:	701a      	strb	r2, [r3, #0]
				if (led2 <= 0) {
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <mode1Counter+0x21c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	dc13      	bgt.n	800039c <mode1Counter+0x210>
					led2 = yellow_value;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <mode1Counter+0x240>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <mode1Counter+0x21c>)
 800037a:	6013      	str	r3, [r2, #0]
					state2 = AUTO_YELLOW;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <mode1Counter+0x244>)
 800037e:	2204      	movs	r2, #4
 8000380:	601a      	str	r2, [r3, #0]
					strcpy(str2,"YELLOW:");
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <mode1Counter+0x248>)
 8000384:	4a0f      	ldr	r2, [pc, #60]	; (80003c4 <mode1Counter+0x238>)
 8000386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800038a:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 800038e:	e005      	b.n	800039c <mode1Counter+0x210>
				break;
 8000390:	bf00      	nop
 8000392:	e004      	b.n	800039e <mode1Counter+0x212>
				break;
 8000394:	bf00      	nop
 8000396:	e002      	b.n	800039e <mode1Counter+0x212>
				break;
 8000398:	bf00      	nop
 800039a:	e000      	b.n	800039e <mode1Counter+0x212>
				break;
 800039c:	bf00      	nop
			}


}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000004 	.word	0x20000004
 80003ac:	20000008 	.word	0x20000008
 80003b0:	40010c00 	.word	0x40010c00
 80003b4:	200000b8 	.word	0x200000b8
 80003b8:	08005af4 	.word	0x08005af4
 80003bc:	20000114 	.word	0x20000114
 80003c0:	08005afc 	.word	0x08005afc
 80003c4:	08005b04 	.word	0x08005b04
 80003c8:	2000010c 	.word	0x2000010c
 80003cc:	20000110 	.word	0x20000110
 80003d0:	2000000c 	.word	0x2000000c
 80003d4:	200000cc 	.word	0x200000cc

080003d8 <get7SEG1>:

static int get7SEG1() {
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	switch (mode) {
 80003dc:	4b10      	ldr	r3, [pc, #64]	; (8000420 <get7SEG1+0x48>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3b01      	subs	r3, #1
 80003e2:	2b03      	cmp	r3, #3
 80003e4:	d816      	bhi.n	8000414 <get7SEG1+0x3c>
 80003e6:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <get7SEG1+0x14>)
 80003e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000403 	.word	0x08000403
 80003f4:	08000409 	.word	0x08000409
 80003f8:	0800040f 	.word	0x0800040f
	case 1:
		return led1;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <get7SEG1+0x4c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	e00a      	b.n	8000418 <get7SEG1+0x40>
	case 2:
		return red_temp;
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <get7SEG1+0x50>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	e007      	b.n	8000418 <get7SEG1+0x40>
	case 3:
		return green_temp;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <get7SEG1+0x54>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	e004      	b.n	8000418 <get7SEG1+0x40>
	case 4:
		return yellow_temp;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <get7SEG1+0x58>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	e001      	b.n	8000418 <get7SEG1+0x40>
	default:
		break;
 8000414:	bf00      	nop
	}
	return 0;
 8000416:	2300      	movs	r3, #0
}
 8000418:	4618      	mov	r0, r3
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	20000108 	.word	0x20000108
 8000424:	20000000 	.word	0x20000000
 8000428:	20000118 	.word	0x20000118
 800042c:	20000120 	.word	0x20000120
 8000430:	2000011c 	.word	0x2000011c

08000434 <get7SEG2>:
static int get7SEG2() {
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	switch (mode) {
 8000438:	4b10      	ldr	r3, [pc, #64]	; (800047c <get7SEG2+0x48>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	3b01      	subs	r3, #1
 800043e:	2b03      	cmp	r3, #3
 8000440:	d816      	bhi.n	8000470 <get7SEG2+0x3c>
 8000442:	a201      	add	r2, pc, #4	; (adr r2, 8000448 <get7SEG2+0x14>)
 8000444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000448:	08000459 	.word	0x08000459
 800044c:	0800045f 	.word	0x0800045f
 8000450:	08000465 	.word	0x08000465
 8000454:	0800046b 	.word	0x0800046b
	case 1:
		return led2;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <get7SEG2+0x4c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	e00a      	b.n	8000474 <get7SEG2+0x40>
	case 2:
		return red_temp;
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <get7SEG2+0x50>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	e007      	b.n	8000474 <get7SEG2+0x40>
	case 3:
		return green_temp;
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <get7SEG2+0x54>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	e004      	b.n	8000474 <get7SEG2+0x40>
	case 4:
		return yellow_temp;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <get7SEG2+0x58>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	e001      	b.n	8000474 <get7SEG2+0x40>
	default:
		break;
 8000470:	bf00      	nop
	}
	return 0;
 8000472:	2300      	movs	r3, #0
}
 8000474:	4618      	mov	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	20000108 	.word	0x20000108
 8000480:	20000004 	.word	0x20000004
 8000484:	20000118 	.word	0x20000118
 8000488:	20000120 	.word	0x20000120
 800048c:	2000011c 	.word	0x2000011c

08000490 <displayMode>:

}
*/


void displayMode() {
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0



	switch (mode) {
 8000494:	4b7a      	ldr	r3, [pc, #488]	; (8000680 <displayMode+0x1f0>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	3b01      	subs	r3, #1
 800049a:	2b03      	cmp	r3, #3
 800049c:	f200 80e5 	bhi.w	800066a <displayMode+0x1da>
 80004a0:	a201      	add	r2, pc, #4	; (adr r2, 80004a8 <displayMode+0x18>)
 80004a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a6:	bf00      	nop
 80004a8:	080004b9 	.word	0x080004b9
 80004ac:	08000511 	.word	0x08000511
 80004b0:	08000583 	.word	0x08000583
 80004b4:	080005f7 	.word	0x080005f7


	case 1:


		if(get0flag()){
 80004b8:	f001 f892 	bl	80015e0 <get0flag>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	f000 80d5 	beq.w	800066e <displayMode+0x1de>

			lcd_clear_display();
 80004c4:	f000 f9c6 	bl	8000854 <lcd_clear_display>
			sprintf(dataframe1,"ROAD 1 %s%d",str1,get7SEG1());
 80004c8:	f7ff ff86 	bl	80003d8 <get7SEG1>
 80004cc:	4603      	mov	r3, r0
 80004ce:	4a6d      	ldr	r2, [pc, #436]	; (8000684 <displayMode+0x1f4>)
 80004d0:	496d      	ldr	r1, [pc, #436]	; (8000688 <displayMode+0x1f8>)
 80004d2:	486e      	ldr	r0, [pc, #440]	; (800068c <displayMode+0x1fc>)
 80004d4:	f004 fe88 	bl	80051e8 <siprintf>
			lcd_goto_XY(1,0);
 80004d8:	2100      	movs	r1, #0
 80004da:	2001      	movs	r0, #1
 80004dc:	f000 f9d2 	bl	8000884 <lcd_goto_XY>
			lcd_send_string(dataframe1);
 80004e0:	486a      	ldr	r0, [pc, #424]	; (800068c <displayMode+0x1fc>)
 80004e2:	f000 f9a1 	bl	8000828 <lcd_send_string>


			sprintf(dataframe2,"ROAD 2 %s%d",str2,get7SEG2());
 80004e6:	f7ff ffa5 	bl	8000434 <get7SEG2>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a68      	ldr	r2, [pc, #416]	; (8000690 <displayMode+0x200>)
 80004ee:	4969      	ldr	r1, [pc, #420]	; (8000694 <displayMode+0x204>)
 80004f0:	4869      	ldr	r0, [pc, #420]	; (8000698 <displayMode+0x208>)
 80004f2:	f004 fe79 	bl	80051e8 <siprintf>
			lcd_goto_XY(0,0);
 80004f6:	2100      	movs	r1, #0
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 f9c3 	bl	8000884 <lcd_goto_XY>
			lcd_send_string(dataframe2);
 80004fe:	4866      	ldr	r0, [pc, #408]	; (8000698 <displayMode+0x208>)
 8000500:	f000 f992 	bl	8000828 <lcd_send_string>


			setTimer0(100);
 8000504:	2064      	movs	r0, #100	; 0x64
 8000506:	f000 ffad 	bl	8001464 <setTimer0>
			mode1Counter();
 800050a:	f7ff fe3f 	bl	800018c <mode1Counter>


			}


		break;
 800050e:	e0ae      	b.n	800066e <displayMode+0x1de>
	case 2:



		if(get3flag()){
 8000510:	f001 f870 	bl	80015f4 <get3flag>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	f000 80ab 	beq.w	8000672 <displayMode+0x1e2>
			lcd_clear_display();
 800051c:	f000 f99a 	bl	8000854 <lcd_clear_display>
			sprintf(dataframe1,"Red Mode:%d",red_temp);
 8000520:	4b5e      	ldr	r3, [pc, #376]	; (800069c <displayMode+0x20c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	495e      	ldr	r1, [pc, #376]	; (80006a0 <displayMode+0x210>)
 8000528:	4858      	ldr	r0, [pc, #352]	; (800068c <displayMode+0x1fc>)
 800052a:	f004 fe5d 	bl	80051e8 <siprintf>
			lcd_goto_XY(1,0);
 800052e:	2100      	movs	r1, #0
 8000530:	2001      	movs	r0, #1
 8000532:	f000 f9a7 	bl	8000884 <lcd_goto_XY>
			lcd_send_string(dataframe1);
 8000536:	4855      	ldr	r0, [pc, #340]	; (800068c <displayMode+0x1fc>)
 8000538:	f000 f976 	bl	8000828 <lcd_send_string>

			sprintf(dataframe2,"Mode: %d",mode);
 800053c:	4b50      	ldr	r3, [pc, #320]	; (8000680 <displayMode+0x1f0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	461a      	mov	r2, r3
 8000542:	4958      	ldr	r1, [pc, #352]	; (80006a4 <displayMode+0x214>)
 8000544:	4854      	ldr	r0, [pc, #336]	; (8000698 <displayMode+0x208>)
 8000546:	f004 fe4f 	bl	80051e8 <siprintf>
			lcd_goto_XY(0,0);
 800054a:	2100      	movs	r1, #0
 800054c:	2000      	movs	r0, #0
 800054e:	f000 f999 	bl	8000884 <lcd_goto_XY>
			lcd_send_string(dataframe2);
 8000552:	4851      	ldr	r0, [pc, #324]	; (8000698 <displayMode+0x208>)
 8000554:	f000 f968 	bl	8000828 <lcd_send_string>
		setTimer3(50);
 8000558:	2032      	movs	r0, #50	; 0x32
 800055a:	f000 ffd1 	bl	8001500 <setTimer3>

		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 800055e:	2120      	movs	r1, #32
 8000560:	4851      	ldr	r0, [pc, #324]	; (80006a8 <displayMode+0x218>)
 8000562:	f001 fc44 	bl	8001dee <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000566:	2108      	movs	r1, #8
 8000568:	484f      	ldr	r0, [pc, #316]	; (80006a8 <displayMode+0x218>)
 800056a:	f001 fc40 	bl	8001dee <HAL_GPIO_TogglePin>

		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800056e:	2110      	movs	r1, #16
 8000570:	484d      	ldr	r0, [pc, #308]	; (80006a8 <displayMode+0x218>)
 8000572:	f001 fc3c 	bl	8001dee <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 8000576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057a:	484b      	ldr	r0, [pc, #300]	; (80006a8 <displayMode+0x218>)
 800057c:	f001 fc37 	bl	8001dee <HAL_GPIO_TogglePin>

		}
		break;
 8000580:	e077      	b.n	8000672 <displayMode+0x1e2>
	case 3:
		if(get3flag()){
 8000582:	f001 f837 	bl	80015f4 <get3flag>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d074      	beq.n	8000676 <displayMode+0x1e6>
			lcd_clear_display();
 800058c:	f000 f962 	bl	8000854 <lcd_clear_display>
			sprintf(dataframe1,"Green Mode:%d",green_temp);
 8000590:	4b46      	ldr	r3, [pc, #280]	; (80006ac <displayMode+0x21c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4946      	ldr	r1, [pc, #280]	; (80006b0 <displayMode+0x220>)
 8000598:	483c      	ldr	r0, [pc, #240]	; (800068c <displayMode+0x1fc>)
 800059a:	f004 fe25 	bl	80051e8 <siprintf>
			lcd_goto_XY(1,0);
 800059e:	2100      	movs	r1, #0
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 f96f 	bl	8000884 <lcd_goto_XY>
			lcd_send_string(dataframe1);
 80005a6:	4839      	ldr	r0, [pc, #228]	; (800068c <displayMode+0x1fc>)
 80005a8:	f000 f93e 	bl	8000828 <lcd_send_string>

			sprintf(dataframe2,"Mode: %d",mode);
 80005ac:	4b34      	ldr	r3, [pc, #208]	; (8000680 <displayMode+0x1f0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	493c      	ldr	r1, [pc, #240]	; (80006a4 <displayMode+0x214>)
 80005b4:	4838      	ldr	r0, [pc, #224]	; (8000698 <displayMode+0x208>)
 80005b6:	f004 fe17 	bl	80051e8 <siprintf>
			lcd_goto_XY(0,0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 f961 	bl	8000884 <lcd_goto_XY>
			lcd_send_string(dataframe2);
 80005c2:	4835      	ldr	r0, [pc, #212]	; (8000698 <displayMode+0x208>)
 80005c4:	f000 f930 	bl	8000828 <lcd_send_string>
			setTimer3(50);
 80005c8:	2032      	movs	r0, #50	; 0x32
 80005ca:	f000 ff99 	bl	8001500 <setTimer3>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin,GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	4835      	ldr	r0, [pc, #212]	; (80006a8 <displayMode+0x218>)
 80005d4:	f001 fbf3 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 80005d8:	2108      	movs	r1, #8
 80005da:	4833      	ldr	r0, [pc, #204]	; (80006a8 <displayMode+0x218>)
 80005dc:	f001 fc07 	bl	8001dee <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin,GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e6:	4830      	ldr	r0, [pc, #192]	; (80006a8 <displayMode+0x218>)
 80005e8:	f001 fbe9 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 80005ec:	2110      	movs	r1, #16
 80005ee:	482e      	ldr	r0, [pc, #184]	; (80006a8 <displayMode+0x218>)
 80005f0:	f001 fbfd 	bl	8001dee <HAL_GPIO_TogglePin>
		}
		break;
 80005f4:	e03f      	b.n	8000676 <displayMode+0x1e6>
	case 4:
		if(get3flag()){
 80005f6:	f000 fffd 	bl	80015f4 <get3flag>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d03c      	beq.n	800067a <displayMode+0x1ea>
			lcd_clear_display();
 8000600:	f000 f928 	bl	8000854 <lcd_clear_display>
			sprintf(dataframe1,"Yellow Mode:%d",yellow_temp);
 8000604:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <displayMode+0x224>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	492b      	ldr	r1, [pc, #172]	; (80006b8 <displayMode+0x228>)
 800060c:	481f      	ldr	r0, [pc, #124]	; (800068c <displayMode+0x1fc>)
 800060e:	f004 fdeb 	bl	80051e8 <siprintf>
			lcd_goto_XY(1,0);
 8000612:	2100      	movs	r1, #0
 8000614:	2001      	movs	r0, #1
 8000616:	f000 f935 	bl	8000884 <lcd_goto_XY>
			lcd_send_string(dataframe1);
 800061a:	481c      	ldr	r0, [pc, #112]	; (800068c <displayMode+0x1fc>)
 800061c:	f000 f904 	bl	8000828 <lcd_send_string>

			sprintf(dataframe2,"Mode: %d",mode);
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <displayMode+0x1f0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	491f      	ldr	r1, [pc, #124]	; (80006a4 <displayMode+0x214>)
 8000628:	481b      	ldr	r0, [pc, #108]	; (8000698 <displayMode+0x208>)
 800062a:	f004 fddd 	bl	80051e8 <siprintf>
			lcd_goto_XY(0,0);
 800062e:	2100      	movs	r1, #0
 8000630:	2000      	movs	r0, #0
 8000632:	f000 f927 	bl	8000884 <lcd_goto_XY>
			lcd_send_string(dataframe2);
 8000636:	4818      	ldr	r0, [pc, #96]	; (8000698 <displayMode+0x208>)
 8000638:	f000 f8f6 	bl	8000828 <lcd_send_string>

		setTimer3(50);
 800063c:	2032      	movs	r0, #50	; 0x32
 800063e:	f000 ff5f 	bl	8001500 <setTimer3>

		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin,GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4818      	ldr	r0, [pc, #96]	; (80006a8 <displayMode+0x218>)
 8000648:	f001 fbb9 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 800064c:	2120      	movs	r1, #32
 800064e:	4816      	ldr	r0, [pc, #88]	; (80006a8 <displayMode+0x218>)
 8000650:	f001 fbcd 	bl	8001dee <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin,GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2110      	movs	r1, #16
 8000658:	4813      	ldr	r0, [pc, #76]	; (80006a8 <displayMode+0x218>)
 800065a:	f001 fbb0 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 800065e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <displayMode+0x218>)
 8000664:	f001 fbc3 	bl	8001dee <HAL_GPIO_TogglePin>
		}
		break;
 8000668:	e007      	b.n	800067a <displayMode+0x1ea>

	default:
		break;
 800066a:	bf00      	nop
 800066c:	e006      	b.n	800067c <displayMode+0x1ec>
		break;
 800066e:	bf00      	nop
 8000670:	e004      	b.n	800067c <displayMode+0x1ec>
		break;
 8000672:	bf00      	nop
 8000674:	e002      	b.n	800067c <displayMode+0x1ec>
		break;
 8000676:	bf00      	nop
 8000678:	e000      	b.n	800067c <displayMode+0x1ec>
		break;
 800067a:	bf00      	nop
	}

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000108 	.word	0x20000108
 8000684:	200000b8 	.word	0x200000b8
 8000688:	08005b0c 	.word	0x08005b0c
 800068c:	200000e0 	.word	0x200000e0
 8000690:	200000cc 	.word	0x200000cc
 8000694:	08005b18 	.word	0x08005b18
 8000698:	200000f4 	.word	0x200000f4
 800069c:	20000118 	.word	0x20000118
 80006a0:	08005b24 	.word	0x08005b24
 80006a4:	08005b30 	.word	0x08005b30
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	20000120 	.word	0x20000120
 80006b0:	08005b3c 	.word	0x08005b3c
 80006b4:	2000011c 	.word	0x2000011c
 80006b8:	08005b4c 	.word	0x08005b4c

080006bc <LedInit>:
int mode;
int red_value, yellow_value, green_value;
int red_temp, yellow_temp, green_temp;
int status = 0;
int status1 = 0;
void LedInit() {
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	red_value = RED_TIME;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <LedInit+0x38>)
 80006c2:	2205      	movs	r2, #5
 80006c4:	601a      	str	r2, [r3, #0]
	yellow_value = YELLOW_TIME;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <LedInit+0x3c>)
 80006c8:	2202      	movs	r2, #2
 80006ca:	601a      	str	r2, [r3, #0]
	green_value = GREEN_TIME;
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <LedInit+0x40>)
 80006ce:	2203      	movs	r2, #3
 80006d0:	601a      	str	r2, [r3, #0]
	red_temp = red_value;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <LedInit+0x38>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <LedInit+0x44>)
 80006d8:	6013      	str	r3, [r2, #0]
	yellow_temp = yellow_value;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <LedInit+0x3c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a09      	ldr	r2, [pc, #36]	; (8000704 <LedInit+0x48>)
 80006e0:	6013      	str	r3, [r2, #0]
	green_temp = green_value;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <LedInit+0x40>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <LedInit+0x4c>)
 80006e8:	6013      	str	r3, [r2, #0]

}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	2000010c 	.word	0x2000010c
 80006f8:	20000110 	.word	0x20000110
 80006fc:	20000114 	.word	0x20000114
 8000700:	20000118 	.word	0x20000118
 8000704:	2000011c 	.word	0x2000011c
 8000708:	20000120 	.word	0x20000120

0800070c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af02      	add	r7, sp, #8
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f023 030f 	bic.w	r3, r3, #15
 800071c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	f043 030c 	orr.w	r3, r3, #12
 800072a:	b2db      	uxtb	r3, r3
 800072c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	b2db      	uxtb	r3, r3
 8000736:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000738:	7bbb      	ldrb	r3, [r7, #14]
 800073a:	f043 030c 	orr.w	r3, r3, #12
 800073e:	b2db      	uxtb	r3, r3
 8000740:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	b2db      	uxtb	r3, r3
 800074a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800074c:	f107 0208 	add.w	r2, r7, #8
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2304      	movs	r3, #4
 8000756:	2142      	movs	r1, #66	; 0x42
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <lcd_send_cmd+0x5c>)
 800075a:	f001 fcdb 	bl	8002114 <HAL_I2C_Master_Transmit>
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000150 	.word	0x20000150

0800076c <lcd_send_data>:

void lcd_send_data (char data)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af02      	add	r7, sp, #8
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f023 030f 	bic.w	r3, r3, #15
 800077c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f043 030d 	orr.w	r3, r3, #13
 800078a:	b2db      	uxtb	r3, r3
 800078c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	f043 0309 	orr.w	r3, r3, #9
 8000794:	b2db      	uxtb	r3, r3
 8000796:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000798:	7bbb      	ldrb	r3, [r7, #14]
 800079a:	f043 030d 	orr.w	r3, r3, #13
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	f043 0309 	orr.w	r3, r3, #9
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007ac:	f107 0208 	add.w	r2, r7, #8
 80007b0:	2364      	movs	r3, #100	; 0x64
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2304      	movs	r3, #4
 80007b6:	2142      	movs	r1, #66	; 0x42
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <lcd_send_data+0x5c>)
 80007ba:	f001 fcab 	bl	8002114 <HAL_I2C_Master_Transmit>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000150 	.word	0x20000150

080007cc <lcd_init>:

void lcd_init (void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80007d0:	2033      	movs	r0, #51	; 0x33
 80007d2:	f7ff ff9b 	bl	800070c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80007d6:	2032      	movs	r0, #50	; 0x32
 80007d8:	f7ff ff98 	bl	800070c <lcd_send_cmd>
	HAL_Delay(50);
 80007dc:	2032      	movs	r0, #50	; 0x32
 80007de:	f000 ff9b 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80007e2:	2028      	movs	r0, #40	; 0x28
 80007e4:	f7ff ff92 	bl	800070c <lcd_send_cmd>
	HAL_Delay(50);
 80007e8:	2032      	movs	r0, #50	; 0x32
 80007ea:	f000 ff95 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff ff8c 	bl	800070c <lcd_send_cmd>
	HAL_Delay(50);
 80007f4:	2032      	movs	r0, #50	; 0x32
 80007f6:	f000 ff8f 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80007fa:	2006      	movs	r0, #6
 80007fc:	f7ff ff86 	bl	800070c <lcd_send_cmd>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f000 ff89 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000806:	200c      	movs	r0, #12
 8000808:	f7ff ff80 	bl	800070c <lcd_send_cmd>
	HAL_Delay(50);
 800080c:	2032      	movs	r0, #50	; 0x32
 800080e:	f000 ff83 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000812:	2002      	movs	r0, #2
 8000814:	f7ff ff7a 	bl	800070c <lcd_send_cmd>
	HAL_Delay(50);
 8000818:	2032      	movs	r0, #50	; 0x32
 800081a:	f000 ff7d 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x80);
 800081e:	2080      	movs	r0, #128	; 0x80
 8000820:	f7ff ff74 	bl	800070c <lcd_send_cmd>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000830:	e006      	b.n	8000840 <lcd_send_string+0x18>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	1c5a      	adds	r2, r3, #1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff96 	bl	800076c <lcd_send_data>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f4      	bne.n	8000832 <lcd_send_string+0xa>
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

    lcd_goto_XY(0, 0);
 8000858:	2100      	movs	r1, #0
 800085a:	2000      	movs	r0, #0
 800085c:	f000 f812 	bl	8000884 <lcd_goto_XY>
    lcd_send_string("                ");
 8000860:	4807      	ldr	r0, [pc, #28]	; (8000880 <lcd_clear_display+0x2c>)
 8000862:	f7ff ffe1 	bl	8000828 <lcd_send_string>


    lcd_goto_XY(1, 0);
 8000866:	2100      	movs	r1, #0
 8000868:	2001      	movs	r0, #1
 800086a:	f000 f80b 	bl	8000884 <lcd_goto_XY>
    lcd_send_string("                ");
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <lcd_clear_display+0x2c>)
 8000870:	f7ff ffda 	bl	8000828 <lcd_send_string>


    lcd_goto_XY(0, 0);
 8000874:	2100      	movs	r1, #0
 8000876:	2000      	movs	r0, #0
 8000878:	f000 f804 	bl	8000884 <lcd_goto_XY>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	08005b5c 	.word	0x08005b5c

08000884 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d108      	bne.n	80008a6 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4413      	add	r3, r2
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	337f      	adds	r3, #127	; 0x7f
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e008      	b.n	80008b8 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	3340      	adds	r3, #64	; 0x40
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff26 	bl	800070c <lcd_send_cmd>
}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <ModeBuffer>:
#include "input_process.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND};
enum ButtonState buttonState[3] = {BUTTON_RELEASED};

void ModeBuffer() {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	switch (buttonState[0]) {
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <ModeBuffer+0x60>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <ModeBuffer+0x12>
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d018      	beq.n	800090a <ModeBuffer+0x42>
			if (!is_button_pressed(0)) {
				buttonState[0] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 80008d8:	e024      	b.n	8000924 <ModeBuffer+0x5c>
			if (is_button_pressed(0)) {
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fa52 	bl	8000d84 <is_button_pressed>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d01b      	beq.n	800091e <ModeBuffer+0x56>
				buttonState[0] = BUTTON_PRESSED;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <ModeBuffer+0x60>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
				mode++;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <ModeBuffer+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <ModeBuffer+0x64>)
 80008f4:	6013      	str	r3, [r2, #0]
				if (mode > 4) {
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <ModeBuffer+0x64>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	dd0f      	ble.n	800091e <ModeBuffer+0x56>
					mode = 1;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <ModeBuffer+0x64>)
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
					resetCountValue();
 8000904:	f7ff fc22 	bl	800014c <resetCountValue>
			break;
 8000908:	e009      	b.n	800091e <ModeBuffer+0x56>
			if (!is_button_pressed(0)) {
 800090a:	2000      	movs	r0, #0
 800090c:	f000 fa3a 	bl	8000d84 <is_button_pressed>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d105      	bne.n	8000922 <ModeBuffer+0x5a>
				buttonState[0] = BUTTON_RELEASED;
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <ModeBuffer+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
			break;
 800091c:	e001      	b.n	8000922 <ModeBuffer+0x5a>
			break;
 800091e:	bf00      	nop
 8000920:	e000      	b.n	8000924 <ModeBuffer+0x5c>
			break;
 8000922:	bf00      	nop
	}
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000124 	.word	0x20000124
 800092c:	20000108 	.word	0x20000108

08000930 <increaseDraftValue>:

static void increaseDraftValue() {
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	switch (mode) {
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <increaseDraftValue+0x80>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b04      	cmp	r3, #4
 800093a:	d020      	beq.n	800097e <increaseDraftValue+0x4e>
 800093c:	2b04      	cmp	r3, #4
 800093e:	dc2b      	bgt.n	8000998 <increaseDraftValue+0x68>
 8000940:	2b02      	cmp	r3, #2
 8000942:	d002      	beq.n	800094a <increaseDraftValue+0x1a>
 8000944:	2b03      	cmp	r3, #3
 8000946:	d00d      	beq.n	8000964 <increaseDraftValue+0x34>
		case 4:
			yellow_temp++;
			if (yellow_temp > 99) yellow_temp = 0;
			break;
		default:
			break;
 8000948:	e026      	b.n	8000998 <increaseDraftValue+0x68>
			red_temp++;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <increaseDraftValue+0x84>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <increaseDraftValue+0x84>)
 8000952:	6013      	str	r3, [r2, #0]
			if (red_temp > 99) red_temp = 0;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <increaseDraftValue+0x84>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b63      	cmp	r3, #99	; 0x63
 800095a:	dd1f      	ble.n	800099c <increaseDraftValue+0x6c>
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <increaseDraftValue+0x84>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
			break;
 8000962:	e01b      	b.n	800099c <increaseDraftValue+0x6c>
			green_temp++;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <increaseDraftValue+0x88>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <increaseDraftValue+0x88>)
 800096c:	6013      	str	r3, [r2, #0]
			if (green_temp > 99) green_temp = 0;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <increaseDraftValue+0x88>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b63      	cmp	r3, #99	; 0x63
 8000974:	dd14      	ble.n	80009a0 <increaseDraftValue+0x70>
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <increaseDraftValue+0x88>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
			break;
 800097c:	e010      	b.n	80009a0 <increaseDraftValue+0x70>
			yellow_temp++;
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <increaseDraftValue+0x8c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <increaseDraftValue+0x8c>)
 8000986:	6013      	str	r3, [r2, #0]
			if (yellow_temp > 99) yellow_temp = 0;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <increaseDraftValue+0x8c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b63      	cmp	r3, #99	; 0x63
 800098e:	dd09      	ble.n	80009a4 <increaseDraftValue+0x74>
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <increaseDraftValue+0x8c>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
			break;
 8000996:	e005      	b.n	80009a4 <increaseDraftValue+0x74>
			break;
 8000998:	bf00      	nop
 800099a:	e004      	b.n	80009a6 <increaseDraftValue+0x76>
			break;
 800099c:	bf00      	nop
 800099e:	e002      	b.n	80009a6 <increaseDraftValue+0x76>
			break;
 80009a0:	bf00      	nop
 80009a2:	e000      	b.n	80009a6 <increaseDraftValue+0x76>
			break;
 80009a4:	bf00      	nop
	}
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000108 	.word	0x20000108
 80009b4:	20000118 	.word	0x20000118
 80009b8:	20000120 	.word	0x20000120
 80009bc:	2000011c 	.word	0x2000011c

080009c0 <setDurationValue>:

static void setDurationValue() {
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
	int diff = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
	switch (mode) {
 80009ca:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <setDurationValue+0xb8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d034      	beq.n	8000a3c <setDurationValue+0x7c>
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	dc49      	bgt.n	8000a6a <setDurationValue+0xaa>
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d002      	beq.n	80009e0 <setDurationValue+0x20>
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d017      	beq.n	8000a0e <setDurationValue+0x4e>
			red_value += diff;
			red_temp += diff;

			break;
		default:
			break;
 80009de:	e044      	b.n	8000a6a <setDurationValue+0xaa>
			diff = red_temp - red_value;
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <setDurationValue+0xbc>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <setDurationValue+0xc0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	607b      	str	r3, [r7, #4]
			red_value = red_temp;
 80009ec:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <setDurationValue+0xbc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <setDurationValue+0xc0>)
 80009f2:	6013      	str	r3, [r2, #0]
			green_value += diff;
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <setDurationValue+0xc4>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <setDurationValue+0xc4>)
 80009fe:	6013      	str	r3, [r2, #0]
			green_temp += diff;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <setDurationValue+0xc8>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <setDurationValue+0xc8>)
 8000a0a:	6013      	str	r3, [r2, #0]
			break;
 8000a0c:	e02e      	b.n	8000a6c <setDurationValue+0xac>
			diff = green_temp - green_value;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <setDurationValue+0xc8>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <setDurationValue+0xc4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	607b      	str	r3, [r7, #4]
			green_value = green_temp;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <setDurationValue+0xc8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <setDurationValue+0xc4>)
 8000a20:	6013      	str	r3, [r2, #0]
			red_value += diff;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <setDurationValue+0xc0>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <setDurationValue+0xc0>)
 8000a2c:	6013      	str	r3, [r2, #0]
			red_temp += diff;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <setDurationValue+0xbc>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a11      	ldr	r2, [pc, #68]	; (8000a7c <setDurationValue+0xbc>)
 8000a38:	6013      	str	r3, [r2, #0]
			break;
 8000a3a:	e017      	b.n	8000a6c <setDurationValue+0xac>
			diff = yellow_temp - yellow_value;
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <setDurationValue+0xcc>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <setDurationValue+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	607b      	str	r3, [r7, #4]
			yellow_value = yellow_temp;
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <setDurationValue+0xcc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <setDurationValue+0xd0>)
 8000a4e:	6013      	str	r3, [r2, #0]
			red_value += diff;
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <setDurationValue+0xc0>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <setDurationValue+0xc0>)
 8000a5a:	6013      	str	r3, [r2, #0]
			red_temp += diff;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <setDurationValue+0xbc>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <setDurationValue+0xbc>)
 8000a66:	6013      	str	r3, [r2, #0]
			break;
 8000a68:	e000      	b.n	8000a6c <setDurationValue+0xac>
			break;
 8000a6a:	bf00      	nop
	}
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000108 	.word	0x20000108
 8000a7c:	20000118 	.word	0x20000118
 8000a80:	2000010c 	.word	0x2000010c
 8000a84:	20000114 	.word	0x20000114
 8000a88:	20000120 	.word	0x20000120
 8000a8c:	2000011c 	.word	0x2000011c
 8000a90:	20000110 	.word	0x20000110

08000a94 <Update>:

void Update() {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	switch (buttonState[1]) {
 8000a98:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <Update+0xe0>)
 8000a9a:	785b      	ldrb	r3, [r3, #1]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d027      	beq.n	8000af0 <Update+0x5c>
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	dc3a      	bgt.n	8000b1a <Update+0x86>
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <Update+0x1a>
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d00c      	beq.n	8000ac6 <Update+0x32>
				reset_flagForButtonHold(1);
				increaseDraftValue();
			}
			break;
		default:
			break;
 8000aac:	e035      	b.n	8000b1a <Update+0x86>
			if (is_button_pressed(1)) {
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f000 f968 	bl	8000d84 <is_button_pressed>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d031      	beq.n	8000b1e <Update+0x8a>
				buttonState[1] = BUTTON_PRESSED;
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <Update+0xe0>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	705a      	strb	r2, [r3, #1]
				increaseDraftValue();
 8000ac0:	f7ff ff36 	bl	8000930 <increaseDraftValue>
			break;
 8000ac4:	e02b      	b.n	8000b1e <Update+0x8a>
			if (!is_button_pressed(1)) {
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f000 f95c 	bl	8000d84 <is_button_pressed>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <Update+0x44>
				buttonState[1] = BUTTON_RELEASED;
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <Update+0xe0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	705a      	strb	r2, [r3, #1]
			if (is_button_pressed_1s(1)) {
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f000 f96d 	bl	8000db8 <is_button_pressed_1s>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d01e      	beq.n	8000b22 <Update+0x8e>
				buttonState[1] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <Update+0xe0>)
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	705a      	strb	r2, [r3, #1]
				increaseDraftValue();
 8000aea:	f7ff ff21 	bl	8000930 <increaseDraftValue>
			break;
 8000aee:	e018      	b.n	8000b22 <Update+0x8e>
			if (!is_button_pressed(1)) {
 8000af0:	2001      	movs	r0, #1
 8000af2:	f000 f947 	bl	8000d84 <is_button_pressed>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <Update+0x6e>
				buttonState[1] = BUTTON_RELEASED;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <Update+0xe0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	705a      	strb	r2, [r3, #1]
			if (is_button_held(1)) {
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 f972 	bl	8000dec <is_button_held>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00b      	beq.n	8000b26 <Update+0x92>
				reset_flagForButtonHold(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f000 f986 	bl	8000e20 <reset_flagForButtonHold>
				increaseDraftValue();
 8000b14:	f7ff ff0c 	bl	8000930 <increaseDraftValue>
			break;
 8000b18:	e005      	b.n	8000b26 <Update+0x92>
			break;
 8000b1a:	bf00      	nop
 8000b1c:	e004      	b.n	8000b28 <Update+0x94>
			break;
 8000b1e:	bf00      	nop
 8000b20:	e002      	b.n	8000b28 <Update+0x94>
			break;
 8000b22:	bf00      	nop
 8000b24:	e000      	b.n	8000b28 <Update+0x94>
			break;
 8000b26:	bf00      	nop
	}

	switch (buttonState[2]) {
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <Update+0xe0>)
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <Update+0xa2>
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d00f      	beq.n	8000b54 <Update+0xc0>
			if (!is_button_pressed(2)) {
				buttonState[2] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 8000b34:	e01b      	b.n	8000b6e <Update+0xda>
			if (is_button_pressed(2)) {
 8000b36:	2002      	movs	r0, #2
 8000b38:	f000 f924 	bl	8000d84 <is_button_pressed>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d012      	beq.n	8000b68 <Update+0xd4>
				buttonState[2] = BUTTON_PRESSED;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <Update+0xe0>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	709a      	strb	r2, [r3, #2]
				setDurationValue();
 8000b48:	f7ff ff3a 	bl	80009c0 <setDurationValue>
				mode=1;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <Update+0xe4>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
			break;
 8000b52:	e009      	b.n	8000b68 <Update+0xd4>
			if (!is_button_pressed(2)) {
 8000b54:	2002      	movs	r0, #2
 8000b56:	f000 f915 	bl	8000d84 <is_button_pressed>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <Update+0xd8>
				buttonState[2] = BUTTON_RELEASED;
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <Update+0xe0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	709a      	strb	r2, [r3, #2]
			break;
 8000b66:	e001      	b.n	8000b6c <Update+0xd8>
			break;
 8000b68:	bf00      	nop
 8000b6a:	e000      	b.n	8000b6e <Update+0xda>
			break;
 8000b6c:	bf00      	nop
	}
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000124 	.word	0x20000124
 8000b78:	20000108 	.word	0x20000108

08000b7c <init_button>:

//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonHold[N0_OF_BUTTONS];
void init_button() {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	e02a      	b.n	8000bde <init_button+0x62>
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <init_button+0x74>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <init_button+0x78>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000b9c:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <init_button+0x7c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer3[i] = BUTTON_IS_RELEASED;
 8000ba6:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <init_button+0x80>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
		flagForButtonPress1s[i] = 0;
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <init_button+0x84>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
		flagForButtonHold[i] = 0;
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <init_button+0x88>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
		counterForButtonPress1s[i] = 0;
 8000bc4:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <init_button+0x8c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		counterForButtonHold[i] = 0;
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <init_button+0x90>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	ddd1      	ble.n	8000b88 <init_button+0xc>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	20000128 	.word	0x20000128
 8000bf4:	2000012c 	.word	0x2000012c
 8000bf8:	20000130 	.word	0x20000130
 8000bfc:	20000134 	.word	0x20000134
 8000c00:	20000138 	.word	0x20000138
 8000c04:	2000013c 	.word	0x2000013c
 8000c08:	20000140 	.word	0x20000140
 8000c0c:	20000148 	.word	0x20000148

08000c10 <button_reading>:
void button_reading(void) {
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0

	for (char i = 0; i < N0_OF_BUTTONS; i++) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	71fb      	strb	r3, [r7, #7]
 8000c1a:	e095      	b.n	8000d48 <button_reading+0x138>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000c1c:	79fa      	ldrb	r2, [r7, #7]
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	494e      	ldr	r1, [pc, #312]	; (8000d5c <button_reading+0x14c>)
 8000c22:	5c89      	ldrb	r1, [r1, r2]
 8000c24:	4a4e      	ldr	r2, [pc, #312]	; (8000d60 <button_reading+0x150>)
 8000c26:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000c28:	79fa      	ldrb	r2, [r7, #7]
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	494d      	ldr	r1, [pc, #308]	; (8000d64 <button_reading+0x154>)
 8000c2e:	5c89      	ldrb	r1, [r1, r2]
 8000c30:	4a4a      	ldr	r2, [pc, #296]	; (8000d5c <button_reading+0x14c>)
 8000c32:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button[i].pGPIOx,Button[i].pin);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4a4c      	ldr	r2, [pc, #304]	; (8000d68 <button_reading+0x158>)
 8000c38:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	494a      	ldr	r1, [pc, #296]	; (8000d68 <button_reading+0x158>)
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	440b      	add	r3, r1
 8000c44:	889b      	ldrh	r3, [r3, #4]
 8000c46:	79fc      	ldrb	r4, [r7, #7]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	f001 f8a0 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b43      	ldr	r3, [pc, #268]	; (8000d64 <button_reading+0x154>)
 8000c56:	551a      	strb	r2, [r3, r4]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer3[i] == debounceButtonBuffer2[i])
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4a42      	ldr	r2, [pc, #264]	; (8000d64 <button_reading+0x154>)
 8000c5c:	5cd2      	ldrb	r2, [r2, r3]
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	493e      	ldr	r1, [pc, #248]	; (8000d5c <button_reading+0x14c>)
 8000c62:	5ccb      	ldrb	r3, [r1, r3]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d10d      	bne.n	8000c84 <button_reading+0x74>
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	4a3d      	ldr	r2, [pc, #244]	; (8000d60 <button_reading+0x150>)
 8000c6c:	5cd2      	ldrb	r2, [r2, r3]
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	493a      	ldr	r1, [pc, #232]	; (8000d5c <button_reading+0x14c>)
 8000c72:	5ccb      	ldrb	r3, [r1, r3]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d105      	bne.n	8000c84 <button_reading+0x74>

			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4939      	ldr	r1, [pc, #228]	; (8000d64 <button_reading+0x154>)
 8000c7e:	5c89      	ldrb	r1, [r1, r2]
 8000c80:	4a3a      	ldr	r2, [pc, #232]	; (8000d6c <button_reading+0x15c>)
 8000c82:	54d1      	strb	r1, [r2, r3]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4a39      	ldr	r2, [pc, #228]	; (8000d6c <button_reading+0x15c>)
 8000c88:	5cd3      	ldrb	r3, [r2, r3]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d147      	bne.n	8000d1e <button_reading+0x10e>


			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin,GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2120      	movs	r1, #32
 8000c92:	4837      	ldr	r0, [pc, #220]	; (8000d70 <button_reading+0x160>)
 8000c94:	f001 f893 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin,GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4834      	ldr	r0, [pc, #208]	; (8000d70 <button_reading+0x160>)
 8000c9e:	f001 f88e 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin,GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca8:	4831      	ldr	r0, [pc, #196]	; (8000d70 <button_reading+0x160>)
 8000caa:	f001 f888 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin,GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2110      	movs	r1, #16
 8000cb2:	482f      	ldr	r0, [pc, #188]	; (8000d70 <button_reading+0x160>)
 8000cb4:	f001 f883 	bl	8001dbe <HAL_GPIO_WritePin>
			//if a button is pressed,counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	4a2e      	ldr	r2, [pc, #184]	; (8000d74 <button_reading+0x164>)
 8000cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc0:	2b63      	cmp	r3, #99	; 0x63
 8000cc2:	d809      	bhi.n	8000cd8 <button_reading+0xc8>
				counterForButtonPress1s[i]++;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a2b      	ldr	r2, [pc, #172]	; (8000d74 <button_reading+0x164>)
 8000cc8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ccc:	3201      	adds	r2, #1
 8000cce:	b291      	uxth	r1, r2
 8000cd0:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <button_reading+0x164>)
 8000cd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000cd6:	e034      	b.n	8000d42 <button_reading+0x132>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4a27      	ldr	r2, [pc, #156]	; (8000d78 <button_reading+0x168>)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	54d1      	strb	r1, [r2, r3]

				//todo
				if (counterForButtonHold[i] < DURATION_FOR_HOLD) {
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <button_reading+0x16c>)
 8000ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ce8:	2b31      	cmp	r3, #49	; 0x31
 8000cea:	d82a      	bhi.n	8000d42 <button_reading+0x132>
					counterForButtonHold[i]++;
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <button_reading+0x16c>)
 8000cf0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000cf4:	3201      	adds	r2, #1
 8000cf6:	b291      	uxth	r1, r2
 8000cf8:	4a20      	ldr	r2, [pc, #128]	; (8000d7c <button_reading+0x16c>)
 8000cfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (counterForButtonHold[i] >= DURATION_FOR_HOLD) {
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <button_reading+0x16c>)
 8000d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d06:	2b31      	cmp	r3, #49	; 0x31
 8000d08:	d91b      	bls.n	8000d42 <button_reading+0x132>
						counterForButtonHold[i] = 0;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <button_reading+0x16c>)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						flagForButtonHold[i] = 1;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <button_reading+0x170>)
 8000d18:	2101      	movs	r1, #1
 8000d1a:	54d1      	strb	r1, [r2, r3]
 8000d1c:	e011      	b.n	8000d42 <button_reading+0x132>
					}
				}
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <button_reading+0x164>)
 8000d22:	2100      	movs	r1, #0
 8000d24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <button_reading+0x168>)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	54d1      	strb	r1, [r2, r3]
			counterForButtonHold[i] = 0;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <button_reading+0x16c>)
 8000d34:	2100      	movs	r1, #0
 8000d36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonHold[i] = 0;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <button_reading+0x170>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	54d1      	strb	r1, [r2, r3]
	for (char i = 0; i < N0_OF_BUTTONS; i++) {
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	3301      	adds	r3, #1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	f67f af66 	bls.w	8000c1c <button_reading+0xc>
		}
	}
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd90      	pop	{r4, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000130 	.word	0x20000130
 8000d60:	20000134 	.word	0x20000134
 8000d64:	2000012c 	.word	0x2000012c
 8000d68:	20000010 	.word	0x20000010
 8000d6c:	20000128 	.word	0x20000128
 8000d70:	40010c00 	.word	0x40010c00
 8000d74:	20000140 	.word	0x20000140
 8000d78:	20000138 	.word	0x20000138
 8000d7c:	20000148 	.word	0x20000148
 8000d80:	2000013c 	.word	0x2000013c

08000d84 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char index) {
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d901      	bls.n	8000d98 <is_button_pressed+0x14>
 8000d94:	2300      	movs	r3, #0
 8000d96:	e007      	b.n	8000da8 <is_button_pressed+0x24>

	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <is_button_pressed+0x30>)
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf0c      	ite	eq
 8000da2:	2301      	moveq	r3, #1
 8000da4:	2300      	movne	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000128 	.word	0x20000128

08000db8 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index) {
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]

	if (index >= N0_OF_BUTTONS)return 0;
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d901      	bls.n	8000dcc <is_button_pressed_1s+0x14>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e007      	b.n	8000ddc <is_button_pressed_1s+0x24>

	return (flagForButtonPress1s[index] == 1);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <is_button_pressed_1s+0x30>)
 8000dd0:	5cd3      	ldrb	r3, [r2, r3]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2301      	moveq	r3, #1
 8000dd8:	2300      	movne	r3, #0
 8000dda:	b2db      	uxtb	r3, r3
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000138 	.word	0x20000138

08000dec <is_button_held>:

unsigned char is_button_held(unsigned char index) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]


	if (index >= N0_OF_BUTTONS)return 0;
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d901      	bls.n	8000e00 <is_button_held+0x14>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	e007      	b.n	8000e10 <is_button_held+0x24>

	return (flagForButtonHold[index] == 1);
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <is_button_held+0x30>)
 8000e04:	5cd3      	ldrb	r3, [r2, r3]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	bf0c      	ite	eq
 8000e0a:	2301      	moveq	r3, #1
 8000e0c:	2300      	movne	r3, #0
 8000e0e:	b2db      	uxtb	r3, r3
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000013c 	.word	0x2000013c

08000e20 <reset_flagForButtonHold>:

void reset_flagForButtonHold(unsigned char index) {
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	flagForButtonHold[index] = 0;
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <reset_flagForButtonHold+0x1c>)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	54d1      	strb	r1, [r2, r3]
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	2000013c 	.word	0x2000013c

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 fc06 	bl	8001654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f82a 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f000 f8e4 	bl	8001018 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e50:	f000 f896 	bl	8000f80 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000e54:	f000 f866 	bl	8000f24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e58:	480f      	ldr	r0, [pc, #60]	; (8000e98 <main+0x58>)
 8000e5a:	f003 fdf1 	bl	8004a40 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_button();
 8000e5e:	f7ff fe8d 	bl	8000b7c <init_button>
  LedInit();
 8000e62:	f7ff fc2b 	bl	80006bc <LedInit>

  setTimer0(100);
 8000e66:	2064      	movs	r0, #100	; 0x64
 8000e68:	f000 fafc 	bl	8001464 <setTimer0>
  setTimer1(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f000 fb13 	bl	8001498 <setTimer1>
  setTimer2(90);
 8000e72:	205a      	movs	r0, #90	; 0x5a
 8000e74:	f000 fb2a 	bl	80014cc <setTimer2>

  setTimer3(1);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f000 fb41 	bl	8001500 <setTimer3>
  lcd_init();
 8000e7e:	f7ff fca5 	bl	80007cc <lcd_init>

	mode=1;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <main+0x5c>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
//  HAL_Delay(50);


        while (1)
        {
        	ModeBuffer();
 8000e88:	f7ff fd1e 	bl	80008c8 <ModeBuffer>

        	displayMode();
 8000e8c:	f7ff fb00 	bl	8000490 <displayMode>

        	Update();
 8000e90:	f7ff fe00 	bl	8000a94 <Update>
        	ModeBuffer();
 8000e94:	e7f8      	b.n	8000e88 <main+0x48>
 8000e96:	bf00      	nop
 8000e98:	200001a4 	.word	0x200001a4
 8000e9c:	20000108 	.word	0x20000108

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b090      	sub	sp, #64	; 0x40
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	2228      	movs	r2, #40	; 0x28
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 f992 	bl	80051d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ed6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 f961 	bl	80041a8 <HAL_RCC_OscConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000eec:	f000 f975 	bl	80011da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000ef8:	23a0      	movs	r3, #160	; 0xa0
 8000efa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 fbce 	bl	80046ac <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f16:	f000 f960 	bl	80011da <Error_Handler>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3740      	adds	r7, #64	; 0x40
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_I2C1_Init+0x50>)
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <MX_I2C1_Init+0x54>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_I2C1_Init+0x50>)
 8000f30:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_I2C1_Init+0x58>)
 8000f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_I2C1_Init+0x50>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_I2C1_Init+0x50>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_I2C1_Init+0x50>)
 8000f42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <MX_I2C1_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_I2C1_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <MX_I2C1_Init+0x50>)
 8000f62:	f000 ff7f 	bl	8001e64 <HAL_I2C_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f6c:	f000 f935 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000150 	.word	0x20000150
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	000186a0 	.word	0x000186a0

08000f80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	463b      	mov	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_TIM2_Init+0x94>)
 8000f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_TIM2_Init+0x94>)
 8000fa6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000faa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_TIM2_Init+0x94>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_TIM2_Init+0x94>)
 8000fb4:	2209      	movs	r2, #9
 8000fb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_TIM2_Init+0x94>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_TIM2_Init+0x94>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <MX_TIM2_Init+0x94>)
 8000fc6:	f003 fceb 	bl	80049a0 <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fd0:	f000 f903 	bl	80011da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <MX_TIM2_Init+0x94>)
 8000fe2:	f003 fe6f 	bl	8004cc4 <HAL_TIM_ConfigClockSource>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fec:	f000 f8f5 	bl	80011da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_TIM2_Init+0x94>)
 8000ffe:	f004 f851 	bl	80050a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001008:	f000 f8e7 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200001a4 	.word	0x200001a4

08001018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	4b5b      	ldr	r3, [pc, #364]	; (800119c <MX_GPIO_Init+0x184>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a5a      	ldr	r2, [pc, #360]	; (800119c <MX_GPIO_Init+0x184>)
 8001032:	f043 0310 	orr.w	r3, r3, #16
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <MX_GPIO_Init+0x184>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001044:	4b55      	ldr	r3, [pc, #340]	; (800119c <MX_GPIO_Init+0x184>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a54      	ldr	r2, [pc, #336]	; (800119c <MX_GPIO_Init+0x184>)
 800104a:	f043 0320 	orr.w	r3, r3, #32
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b52      	ldr	r3, [pc, #328]	; (800119c <MX_GPIO_Init+0x184>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0320 	and.w	r3, r3, #32
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b4f      	ldr	r3, [pc, #316]	; (800119c <MX_GPIO_Init+0x184>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a4e      	ldr	r2, [pc, #312]	; (800119c <MX_GPIO_Init+0x184>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b4c      	ldr	r3, [pc, #304]	; (800119c <MX_GPIO_Init+0x184>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	4b49      	ldr	r3, [pc, #292]	; (800119c <MX_GPIO_Init+0x184>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a48      	ldr	r2, [pc, #288]	; (800119c <MX_GPIO_Init+0x184>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b46      	ldr	r3, [pc, #280]	; (800119c <MX_GPIO_Init+0x184>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2120      	movs	r1, #32
 8001090:	4843      	ldr	r0, [pc, #268]	; (80011a0 <MX_GPIO_Init+0x188>)
 8001092:	f000 fe94 	bl	8001dbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800109c:	4841      	ldr	r0, [pc, #260]	; (80011a4 <MX_GPIO_Init+0x18c>)
 800109e:	f000 fe8e 	bl	8001dbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a8:	483f      	ldr	r0, [pc, #252]	; (80011a8 <MX_GPIO_Init+0x190>)
 80010aa:	f000 fe88 	bl	8001dbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <MX_GPIO_Init+0x194>)
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4619      	mov	r1, r3
 80010c2:	4839      	ldr	r0, [pc, #228]	; (80011a8 <MX_GPIO_Init+0x190>)
 80010c4:	f000 fce0 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010c8:	2304      	movs	r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	4831      	ldr	r0, [pc, #196]	; (80011a0 <MX_GPIO_Init+0x188>)
 80010dc:	f000 fcd4 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010e0:	2308      	movs	r3, #8
 80010e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	482b      	ldr	r0, [pc, #172]	; (80011a0 <MX_GPIO_Init+0x188>)
 80010f4:	f000 fcc8 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80010f8:	2320      	movs	r3, #32
 80010fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2302      	movs	r3, #2
 8001106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	4824      	ldr	r0, [pc, #144]	; (80011a0 <MX_GPIO_Init+0x188>)
 8001110:	f000 fcba 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8001114:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2302      	movs	r3, #2
 8001124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4619      	mov	r1, r3
 800112c:	481d      	ldr	r0, [pc, #116]	; (80011a4 <MX_GPIO_Init+0x18c>)
 800112e:	f000 fcab 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4619      	mov	r1, r3
 8001144:	4818      	ldr	r0, [pc, #96]	; (80011a8 <MX_GPIO_Init+0x190>)
 8001146:	f000 fc9f 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800114a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2302      	movs	r3, #2
 800115a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	4811      	ldr	r0, [pc, #68]	; (80011a8 <MX_GPIO_Init+0x190>)
 8001164:	f000 fc90 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 8001168:	f44f 7340 	mov.w	r3, #768	; 0x300
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <MX_GPIO_Init+0x188>)
 800117e:	f000 fc83 	bl	8001a88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2028      	movs	r0, #40	; 0x28
 8001188:	f000 fbc1 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800118c:	2028      	movs	r0, #40	; 0x28
 800118e:	f000 fbda 	bl	8001946 <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40010c00 	.word	0x40010c00
 80011a8:	40011000 	.word	0x40011000
 80011ac:	10110000 	.word	0x10110000

080011b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

		timer_run();
 80011b8:	f000 f9bc 	bl	8001534 <timer_run>
		button_reading();
 80011bc:	f7ff fd28 	bl	8000c10 <button_reading>



 }
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011de:	b672      	cpsid	i
}
 80011e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <Error_Handler+0x8>

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_MspInit+0x5c>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_MspInit+0x5c>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6193      	str	r3, [r2, #24]
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_MspInit+0x5c>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_MspInit+0x5c>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_MspInit+0x5c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_MspInit+0x5c>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_MspInit+0x60>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_MspInit+0x60>)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000

08001248 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <HAL_I2C_MspInit+0xb0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d142      	bne.n	80012ee <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_I2C_MspInit+0xb4>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a23      	ldr	r2, [pc, #140]	; (80012fc <HAL_I2C_MspInit+0xb4>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_I2C_MspInit+0xb4>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001280:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001286:	2312      	movs	r3, #18
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	481a      	ldr	r0, [pc, #104]	; (8001300 <HAL_I2C_MspInit+0xb8>)
 8001296:	f000 fbf7 	bl	8001a88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_I2C_MspInit+0xbc>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <HAL_I2C_MspInit+0xbc>)
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_I2C_MspInit+0xb4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_I2C_MspInit+0xb4>)
 80012bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_I2C_MspInit+0xb4>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	201f      	movs	r0, #31
 80012d4:	f000 fb1b 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012d8:	201f      	movs	r0, #31
 80012da:	f000 fb34 	bl	8001946 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2020      	movs	r0, #32
 80012e4:	f000 fb13 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80012e8:	2020      	movs	r0, #32
 80012ea:	f000 fb2c 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40005400 	.word	0x40005400
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010c00 	.word	0x40010c00
 8001304:	40010000 	.word	0x40010000

08001308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001318:	d113      	bne.n	8001342 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_TIM_Base_MspInit+0x44>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <HAL_TIM_Base_MspInit+0x44>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	61d3      	str	r3, [r2, #28]
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_TIM_Base_MspInit+0x44>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	201c      	movs	r0, #28
 8001338:	f000 fae9 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800133c:	201c      	movs	r0, #28
 800133e:	f000 fb02 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 f9a3 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <TIM2_IRQHandler+0x10>)
 80013a6:	f003 fb9d 	bl	8004ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200001a4 	.word	0x200001a4

080013b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <I2C1_EV_IRQHandler+0x10>)
 80013ba:	f000 ffa9 	bl	8002310 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000150 	.word	0x20000150

080013c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <I2C1_ER_IRQHandler+0x10>)
 80013ce:	f001 f910 	bl	80025f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000150 	.word	0x20000150

080013dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013e4:	f000 fd1c 	bl	8001e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f003 feb2 	bl	8005184 <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20005000 	.word	0x20005000
 800144c:	00000400 	.word	0x00000400
 8001450:	200001ec 	.word	0x200001ec
 8001454:	20000228 	.word	0x20000228

08001458 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <setTimer0>:
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;
void setTimer0(int duration) {
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <setTimer0+0x28>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	fb92 f3f3 	sdiv	r3, r2, r3
 8001476:	4a06      	ldr	r2, [pc, #24]	; (8001490 <setTimer0+0x2c>)
 8001478:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <setTimer0+0x30>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2000002c 	.word	0x2000002c
 8001490:	200001f0 	.word	0x200001f0
 8001494:	200001f4 	.word	0x200001f4

08001498 <setTimer1>:

void setTimer1(int duration) {
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <setTimer1+0x28>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014aa:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <setTimer1+0x2c>)
 80014ac:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <setTimer1+0x30>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	2000002c 	.word	0x2000002c
 80014c4:	200001f8 	.word	0x200001f8
 80014c8:	200001fc 	.word	0x200001fc

080014cc <setTimer2>:
void setTimer2(int duration) {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <setTimer2+0x28>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	fb92 f3f3 	sdiv	r3, r2, r3
 80014de:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <setTimer2+0x2c>)
 80014e0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <setTimer2+0x30>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	2000002c 	.word	0x2000002c
 80014f8:	20000200 	.word	0x20000200
 80014fc:	20000204 	.word	0x20000204

08001500 <setTimer3>:
void setTimer3(int duration) {
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <setTimer3+0x28>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001512:	4a06      	ldr	r2, [pc, #24]	; (800152c <setTimer3+0x2c>)
 8001514:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <setTimer3+0x30>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2000002c 	.word	0x2000002c
 800152c:	20000208 	.word	0x20000208
 8001530:	2000020c 	.word	0x2000020c

08001534 <timer_run>:
void timer_run() {
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <timer_run+0x8c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	dd0b      	ble.n	8001558 <timer_run+0x24>
		timer0_counter--;
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <timer_run+0x8c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3b01      	subs	r3, #1
 8001546:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <timer_run+0x8c>)
 8001548:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <timer_run+0x8c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <timer_run+0x24>
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <timer_run+0x90>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]

	}
	if (timer1_counter > 0) {
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <timer_run+0x94>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	dd0b      	ble.n	8001578 <timer_run+0x44>
		timer1_counter--;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <timer_run+0x94>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	4a18      	ldr	r2, [pc, #96]	; (80015c8 <timer_run+0x94>)
 8001568:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <timer_run+0x94>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <timer_run+0x44>
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <timer_run+0x98>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

	}
	if (timer2_counter > 0) {
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <timer_run+0x9c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dd0b      	ble.n	8001598 <timer_run+0x64>
		timer2_counter--;
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <timer_run+0x9c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <timer_run+0x9c>)
 8001588:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <timer_run+0x9c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <timer_run+0x64>
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <timer_run+0xa0>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]

	}
	if(timer3_counter>0){
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <timer_run+0xa4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dd0b      	ble.n	80015b8 <timer_run+0x84>
		timer3_counter--;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <timer_run+0xa4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <timer_run+0xa4>)
 80015a8:	6013      	str	r3, [r2, #0]
		if(timer3_counter==0) timer3_flag =1;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <timer_run+0xa4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <timer_run+0x84>
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <timer_run+0xa8>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
	}
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	200001f0 	.word	0x200001f0
 80015c4:	200001f4 	.word	0x200001f4
 80015c8:	200001f8 	.word	0x200001f8
 80015cc:	200001fc 	.word	0x200001fc
 80015d0:	20000200 	.word	0x20000200
 80015d4:	20000204 	.word	0x20000204
 80015d8:	20000208 	.word	0x20000208
 80015dc:	2000020c 	.word	0x2000020c

080015e0 <get0flag>:
int get0flag() {
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
	return timer0_flag;
 80015e4:	4b02      	ldr	r3, [pc, #8]	; (80015f0 <get0flag+0x10>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	200001f4 	.word	0x200001f4

080015f4 <get3flag>:
	return timer1_flag;
}
int get2flag() {
	return timer2_flag;
}
int get3flag() {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	return timer3_flag;
 80015f8:	4b02      	ldr	r3, [pc, #8]	; (8001604 <get3flag+0x10>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	2000020c 	.word	0x2000020c

08001608 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001608:	f7ff ff26 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001610:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001624:	4c09      	ldr	r4, [pc, #36]	; (800164c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f003 fdad 	bl	8005190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001636:	f7ff fc03 	bl	8000e40 <main>
  bx lr
 800163a:	4770      	bx	lr
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001644:	08005bd8 	.word	0x08005bd8
  ldr r2, =_sbss
 8001648:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800164c:	20000224 	.word	0x20000224

08001650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC1_2_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_Init+0x28>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_Init+0x28>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f947 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166a:	2000      	movs	r0, #0
 800166c:	f000 f808 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001670:	f7ff fdb8 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40022000 	.word	0x40022000

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x54>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x58>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f95f 	bl	8001962 <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f000 f927 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_InitTick+0x5c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000028 	.word	0x20000028
 80016d8:	20000034 	.word	0x20000034
 80016dc:	20000030 	.word	0x20000030

080016e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x1c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_IncTick+0x20>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a03      	ldr	r2, [pc, #12]	; (8001700 <HAL_IncTick+0x20>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000034 	.word	0x20000034
 8001700:	20000210 	.word	0x20000210

08001704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b02      	ldr	r3, [pc, #8]	; (8001714 <HAL_GetTick+0x10>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	20000210 	.word	0x20000210

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff fff0 	bl	8001704 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffe0 	bl	8001704 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000034 	.word	0x20000034

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4906      	ldr	r1, [pc, #24]	; (80017f8 <__NVIC_EnableIRQ+0x34>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff90 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff2d 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff42 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff90 	bl	8001850 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5f 	bl	80017fc <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff35 	bl	80017c4 <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d005      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e051      	b.n	8001a44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 020e 	bic.w	r2, r2, #14
 80019ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a22      	ldr	r2, [pc, #136]	; (8001a50 <HAL_DMA_Abort_IT+0xd4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d029      	beq.n	8001a1e <HAL_DMA_Abort_IT+0xa2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <HAL_DMA_Abort_IT+0xd8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d022      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x9e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <HAL_DMA_Abort_IT+0xdc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01a      	beq.n	8001a14 <HAL_DMA_Abort_IT+0x98>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_DMA_Abort_IT+0xe0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d012      	beq.n	8001a0e <HAL_DMA_Abort_IT+0x92>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <HAL_DMA_Abort_IT+0xe4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00a      	beq.n	8001a08 <HAL_DMA_Abort_IT+0x8c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <HAL_DMA_Abort_IT+0xe8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d102      	bne.n	8001a02 <HAL_DMA_Abort_IT+0x86>
 80019fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a00:	e00e      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a06:	e00b      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a0c:	e008      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a12:	e005      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a18:	e002      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a1a:	2310      	movs	r3, #16
 8001a1c:	e000      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <HAL_DMA_Abort_IT+0xec>)
 8001a22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
    } 
  }
  return status;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40020008 	.word	0x40020008
 8001a54:	4002001c 	.word	0x4002001c
 8001a58:	40020030 	.word	0x40020030
 8001a5c:	40020044 	.word	0x40020044
 8001a60:	40020058 	.word	0x40020058
 8001a64:	4002006c 	.word	0x4002006c
 8001a68:	40020000 	.word	0x40020000

08001a6c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a7a:	b2db      	uxtb	r3, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b08b      	sub	sp, #44	; 0x2c
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9a:	e169      	b.n	8001d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	f040 8158 	bne.w	8001d6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4a9a      	ldr	r2, [pc, #616]	; (8001d28 <HAL_GPIO_Init+0x2a0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d05e      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001ac4:	4a98      	ldr	r2, [pc, #608]	; (8001d28 <HAL_GPIO_Init+0x2a0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d875      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001aca:	4a98      	ldr	r2, [pc, #608]	; (8001d2c <HAL_GPIO_Init+0x2a4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d058      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001ad0:	4a96      	ldr	r2, [pc, #600]	; (8001d2c <HAL_GPIO_Init+0x2a4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d86f      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001ad6:	4a96      	ldr	r2, [pc, #600]	; (8001d30 <HAL_GPIO_Init+0x2a8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d052      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001adc:	4a94      	ldr	r2, [pc, #592]	; (8001d30 <HAL_GPIO_Init+0x2a8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d869      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001ae2:	4a94      	ldr	r2, [pc, #592]	; (8001d34 <HAL_GPIO_Init+0x2ac>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d04c      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001ae8:	4a92      	ldr	r2, [pc, #584]	; (8001d34 <HAL_GPIO_Init+0x2ac>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d863      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001aee:	4a92      	ldr	r2, [pc, #584]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d046      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
 8001af4:	4a90      	ldr	r2, [pc, #576]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d85d      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001afa:	2b12      	cmp	r3, #18
 8001afc:	d82a      	bhi.n	8001b54 <HAL_GPIO_Init+0xcc>
 8001afe:	2b12      	cmp	r3, #18
 8001b00:	d859      	bhi.n	8001bb6 <HAL_GPIO_Init+0x12e>
 8001b02:	a201      	add	r2, pc, #4	; (adr r2, 8001b08 <HAL_GPIO_Init+0x80>)
 8001b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b08:	08001b83 	.word	0x08001b83
 8001b0c:	08001b5d 	.word	0x08001b5d
 8001b10:	08001b6f 	.word	0x08001b6f
 8001b14:	08001bb1 	.word	0x08001bb1
 8001b18:	08001bb7 	.word	0x08001bb7
 8001b1c:	08001bb7 	.word	0x08001bb7
 8001b20:	08001bb7 	.word	0x08001bb7
 8001b24:	08001bb7 	.word	0x08001bb7
 8001b28:	08001bb7 	.word	0x08001bb7
 8001b2c:	08001bb7 	.word	0x08001bb7
 8001b30:	08001bb7 	.word	0x08001bb7
 8001b34:	08001bb7 	.word	0x08001bb7
 8001b38:	08001bb7 	.word	0x08001bb7
 8001b3c:	08001bb7 	.word	0x08001bb7
 8001b40:	08001bb7 	.word	0x08001bb7
 8001b44:	08001bb7 	.word	0x08001bb7
 8001b48:	08001bb7 	.word	0x08001bb7
 8001b4c:	08001b65 	.word	0x08001b65
 8001b50:	08001b79 	.word	0x08001b79
 8001b54:	4a79      	ldr	r2, [pc, #484]	; (8001d3c <HAL_GPIO_Init+0x2b4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b5a:	e02c      	b.n	8001bb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e029      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e024      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	3308      	adds	r3, #8
 8001b74:	623b      	str	r3, [r7, #32]
          break;
 8001b76:	e01f      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	623b      	str	r3, [r7, #32]
          break;
 8001b80:	e01a      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	623b      	str	r3, [r7, #32]
          break;
 8001b8e:	e013      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	611a      	str	r2, [r3, #16]
          break;
 8001ba2:	e009      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	615a      	str	r2, [r3, #20]
          break;
 8001bae:	e003      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
          break;
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x130>
          break;
 8001bb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2bff      	cmp	r3, #255	; 0xff
 8001bbc:	d801      	bhi.n	8001bc2 <HAL_GPIO_Init+0x13a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	e001      	b.n	8001bc6 <HAL_GPIO_Init+0x13e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2bff      	cmp	r3, #255	; 0xff
 8001bcc:	d802      	bhi.n	8001bd4 <HAL_GPIO_Init+0x14c>
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	e002      	b.n	8001bda <HAL_GPIO_Init+0x152>
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	3b08      	subs	r3, #8
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	210f      	movs	r1, #15
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	401a      	ands	r2, r3
 8001bec:	6a39      	ldr	r1, [r7, #32]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80b1 	beq.w	8001d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c08:	4b4d      	ldr	r3, [pc, #308]	; (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a4c      	ldr	r2, [pc, #304]	; (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c20:	4a48      	ldr	r2, [pc, #288]	; (8001d44 <HAL_GPIO_Init+0x2bc>)
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a40      	ldr	r2, [pc, #256]	; (8001d48 <HAL_GPIO_Init+0x2c0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d013      	beq.n	8001c74 <HAL_GPIO_Init+0x1ec>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a3f      	ldr	r2, [pc, #252]	; (8001d4c <HAL_GPIO_Init+0x2c4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00d      	beq.n	8001c70 <HAL_GPIO_Init+0x1e8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a3e      	ldr	r2, [pc, #248]	; (8001d50 <HAL_GPIO_Init+0x2c8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d007      	beq.n	8001c6c <HAL_GPIO_Init+0x1e4>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a3d      	ldr	r2, [pc, #244]	; (8001d54 <HAL_GPIO_Init+0x2cc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_GPIO_Init+0x1e0>
 8001c64:	2303      	movs	r3, #3
 8001c66:	e006      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e004      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c74:	2300      	movs	r3, #0
 8001c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c78:	f002 0203 	and.w	r2, r2, #3
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	4093      	lsls	r3, r2
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c86:	492f      	ldr	r1, [pc, #188]	; (8001d44 <HAL_GPIO_Init+0x2bc>)
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	492c      	ldr	r1, [pc, #176]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	4928      	ldr	r1, [pc, #160]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	4922      	ldr	r1, [pc, #136]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	60cb      	str	r3, [r1, #12]
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	491e      	ldr	r1, [pc, #120]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d006      	beq.n	8001cfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4918      	ldr	r1, [pc, #96]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	4914      	ldr	r1, [pc, #80]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d021      	beq.n	8001d5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
 8001d24:	e021      	b.n	8001d6a <HAL_GPIO_Init+0x2e2>
 8001d26:	bf00      	nop
 8001d28:	10320000 	.word	0x10320000
 8001d2c:	10310000 	.word	0x10310000
 8001d30:	10220000 	.word	0x10220000
 8001d34:	10210000 	.word	0x10210000
 8001d38:	10120000 	.word	0x10120000
 8001d3c:	10110000 	.word	0x10110000
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40010800 	.word	0x40010800
 8001d4c:	40010c00 	.word	0x40010c00
 8001d50:	40011000 	.word	0x40011000
 8001d54:	40011400 	.word	0x40011400
 8001d58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	4909      	ldr	r1, [pc, #36]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f47f ae8e 	bne.w	8001a9c <HAL_GPIO_Init+0x14>
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	372c      	adds	r7, #44	; 0x2c
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	807b      	strh	r3, [r7, #2]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dce:	787b      	ldrb	r3, [r7, #1]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd4:	887a      	ldrh	r2, [r7, #2]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dda:	e003      	b.n	8001de4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	041a      	lsls	r2, r3, #16
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	611a      	str	r2, [r3, #16]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e00:	887a      	ldrh	r2, [r7, #2]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	041a      	lsls	r2, r3, #16
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	400b      	ands	r3, r1
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f806 	bl	8001e50 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40010400 	.word	0x40010400

08001e50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e12b      	b.n	80020ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff f9dc 	bl	8001248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2224      	movs	r2, #36	; 0x24
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ec8:	f002 fd38 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8001ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4a81      	ldr	r2, [pc, #516]	; (80020d8 <HAL_I2C_Init+0x274>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d807      	bhi.n	8001ee8 <HAL_I2C_Init+0x84>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a80      	ldr	r2, [pc, #512]	; (80020dc <HAL_I2C_Init+0x278>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	bf94      	ite	ls
 8001ee0:	2301      	movls	r3, #1
 8001ee2:	2300      	movhi	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e006      	b.n	8001ef6 <HAL_I2C_Init+0x92>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4a7d      	ldr	r2, [pc, #500]	; (80020e0 <HAL_I2C_Init+0x27c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	bf94      	ite	ls
 8001ef0:	2301      	movls	r3, #1
 8001ef2:	2300      	movhi	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0e7      	b.n	80020ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4a78      	ldr	r2, [pc, #480]	; (80020e4 <HAL_I2C_Init+0x280>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	0c9b      	lsrs	r3, r3, #18
 8001f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a6a      	ldr	r2, [pc, #424]	; (80020d8 <HAL_I2C_Init+0x274>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d802      	bhi.n	8001f38 <HAL_I2C_Init+0xd4>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3301      	adds	r3, #1
 8001f36:	e009      	b.n	8001f4c <HAL_I2C_Init+0xe8>
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	4a69      	ldr	r2, [pc, #420]	; (80020e8 <HAL_I2C_Init+0x284>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	495c      	ldr	r1, [pc, #368]	; (80020d8 <HAL_I2C_Init+0x274>)
 8001f68:	428b      	cmp	r3, r1
 8001f6a:	d819      	bhi.n	8001fa0 <HAL_I2C_Init+0x13c>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1e59      	subs	r1, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f80:	400b      	ands	r3, r1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_I2C_Init+0x138>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1e59      	subs	r1, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9a:	e051      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e04f      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d111      	bne.n	8001fcc <HAL_I2C_Init+0x168>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	440b      	add	r3, r1
 8001fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	e012      	b.n	8001ff2 <HAL_I2C_Init+0x18e>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1e58      	subs	r0, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	0099      	lsls	r1, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf0c      	ite	eq
 8001fec:	2301      	moveq	r3, #1
 8001fee:	2300      	movne	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Init+0x196>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e022      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10e      	bne.n	8002020 <HAL_I2C_Init+0x1bc>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1e58      	subs	r0, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6859      	ldr	r1, [r3, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	440b      	add	r3, r1
 8002010:	fbb0 f3f3 	udiv	r3, r0, r3
 8002014:	3301      	adds	r3, #1
 8002016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800201e:	e00f      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e58      	subs	r0, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	0099      	lsls	r1, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	fbb0 f3f3 	udiv	r3, r0, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	6809      	ldr	r1, [r1, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69da      	ldr	r2, [r3, #28]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800206e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6911      	ldr	r1, [r2, #16]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68d2      	ldr	r2, [r2, #12]
 800207a:	4311      	orrs	r1, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	430b      	orrs	r3, r1
 8002082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	000186a0 	.word	0x000186a0
 80020dc:	001e847f 	.word	0x001e847f
 80020e0:	003d08ff 	.word	0x003d08ff
 80020e4:	431bde83 	.word	0x431bde83
 80020e8:	10624dd3 	.word	0x10624dd3

080020ec <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fe:	2b80      	cmp	r3, #128	; 0x80
 8002100:	d103      	bne.n	800210a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  }
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af02      	add	r7, sp, #8
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	461a      	mov	r2, r3
 8002120:	460b      	mov	r3, r1
 8002122:	817b      	strh	r3, [r7, #10]
 8002124:	4613      	mov	r3, r2
 8002126:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff faec 	bl	8001704 <HAL_GetTick>
 800212c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b20      	cmp	r3, #32
 8002138:	f040 80e0 	bne.w	80022fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2319      	movs	r3, #25
 8002142:	2201      	movs	r2, #1
 8002144:	4970      	ldr	r1, [pc, #448]	; (8002308 <HAL_I2C_Master_Transmit+0x1f4>)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f001 fe0a 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002152:	2302      	movs	r3, #2
 8002154:	e0d3      	b.n	80022fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_I2C_Master_Transmit+0x50>
 8002160:	2302      	movs	r3, #2
 8002162:	e0cc      	b.n	80022fe <HAL_I2C_Master_Transmit+0x1ea>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d007      	beq.n	800218a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002198:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2221      	movs	r2, #33	; 0x21
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2210      	movs	r2, #16
 80021a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	893a      	ldrh	r2, [r7, #8]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4a50      	ldr	r2, [pc, #320]	; (800230c <HAL_I2C_Master_Transmit+0x1f8>)
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021cc:	8979      	ldrh	r1, [r7, #10]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	6a3a      	ldr	r2, [r7, #32]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f001 fc9a 	bl	8003b0c <I2C_MasterRequestWrite>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e08d      	b.n	80022fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021f8:	e066      	b.n	80022c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	6a39      	ldr	r1, [r7, #32]
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f001 fec8 	bl	8003f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00d      	beq.n	8002226 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b04      	cmp	r3, #4
 8002210:	d107      	bne.n	8002222 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002220:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e06b      	b.n	80022fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b04      	cmp	r3, #4
 8002262:	d11b      	bne.n	800229c <HAL_I2C_Master_Transmit+0x188>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	2b00      	cmp	r3, #0
 800226a:	d017      	beq.n	800229c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	6a39      	ldr	r1, [r7, #32]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f001 febf 	bl	8004024 <I2C_WaitOnBTFFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00d      	beq.n	80022c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d107      	bne.n	80022c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e01a      	b.n	80022fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d194      	bne.n	80021fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e000      	b.n	80022fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
  }
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	00100002 	.word	0x00100002
 800230c:	ffff0000 	.word	0xffff0000

08002310 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002330:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b10      	cmp	r3, #16
 800233e:	d003      	beq.n	8002348 <HAL_I2C_EV_IRQHandler+0x38>
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b40      	cmp	r3, #64	; 0x40
 8002344:	f040 80c1 	bne.w	80024ca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10d      	bne.n	800237e <HAL_I2C_EV_IRQHandler+0x6e>
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002368:	d003      	beq.n	8002372 <HAL_I2C_EV_IRQHandler+0x62>
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002370:	d101      	bne.n	8002376 <HAL_I2C_EV_IRQHandler+0x66>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_I2C_EV_IRQHandler+0x68>
 8002376:	2300      	movs	r3, #0
 8002378:	2b01      	cmp	r3, #1
 800237a:	f000 8132 	beq.w	80025e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00c      	beq.n	80023a2 <HAL_I2C_EV_IRQHandler+0x92>
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	0a5b      	lsrs	r3, r3, #9
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f001 feed 	bl	8004174 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fd90 	bl	8002ec0 <I2C_Master_SB>
 80023a0:	e092      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	0a5b      	lsrs	r3, r3, #9
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fe05 	bl	8002fca <I2C_Master_ADD10>
 80023c0:	e082      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	0a5b      	lsrs	r3, r3, #9
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fe1e 	bl	800301c <I2C_Master_ADDR>
 80023e0:	e072      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d03b      	beq.n	8002466 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023fc:	f000 80f3 	beq.w	80025e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	09db      	lsrs	r3, r3, #7
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00f      	beq.n	800242c <HAL_I2C_EV_IRQHandler+0x11c>
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	0a9b      	lsrs	r3, r3, #10
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <HAL_I2C_EV_IRQHandler+0x11c>
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f9e8 	bl	80027fa <I2C_MasterTransmit_TXE>
 800242a:	e04d      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80d6 	beq.w	80025e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	0a5b      	lsrs	r3, r3, #9
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80cf 	beq.w	80025e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	2b21      	cmp	r3, #33	; 0x21
 800244c:	d103      	bne.n	8002456 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fa6f 	bl	8002932 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002454:	e0c7      	b.n	80025e6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	f040 80c4 	bne.w	80025e6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fadd 	bl	8002a1e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002464:	e0bf      	b.n	80025e6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002474:	f000 80b7 	beq.w	80025e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	099b      	lsrs	r3, r3, #6
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00f      	beq.n	80024a4 <HAL_I2C_EV_IRQHandler+0x194>
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	0a9b      	lsrs	r3, r3, #10
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_I2C_EV_IRQHandler+0x194>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d103      	bne.n	80024a4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fb56 	bl	8002b4e <I2C_MasterReceive_RXNE>
 80024a2:	e011      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 809a 	beq.w	80025e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	0a5b      	lsrs	r3, r3, #9
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8093 	beq.w	80025e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fc0c 	bl	8002cde <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024c6:	e08e      	b.n	80025e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80024c8:	e08d      	b.n	80025e6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e007      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d012      	beq.n	800251e <HAL_I2C_EV_IRQHandler+0x20e>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	0a5b      	lsrs	r3, r3, #9
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00c      	beq.n	800251e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002514:	69b9      	ldr	r1, [r7, #24]
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 ffd7 	bl	80034ca <I2C_Slave_ADDR>
 800251c:	e066      	b.n	80025ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <HAL_I2C_EV_IRQHandler+0x22e>
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	0a5b      	lsrs	r3, r3, #9
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f001 f812 	bl	8003560 <I2C_Slave_STOPF>
 800253c:	e056      	b.n	80025ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800253e:	7bbb      	ldrb	r3, [r7, #14]
 8002540:	2b21      	cmp	r3, #33	; 0x21
 8002542:	d002      	beq.n	800254a <HAL_I2C_EV_IRQHandler+0x23a>
 8002544:	7bbb      	ldrb	r3, [r7, #14]
 8002546:	2b29      	cmp	r3, #41	; 0x29
 8002548:	d125      	bne.n	8002596 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	09db      	lsrs	r3, r3, #7
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00f      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x266>
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	0a9b      	lsrs	r3, r3, #10
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x266>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 feef 	bl	8003352 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002574:	e039      	b.n	80025ea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d033      	beq.n	80025ea <HAL_I2C_EV_IRQHandler+0x2da>
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	0a5b      	lsrs	r3, r3, #9
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d02d      	beq.n	80025ea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 ff1c 	bl	80033cc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002594:	e029      	b.n	80025ea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00f      	beq.n	80025c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	0a9b      	lsrs	r3, r3, #10
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d103      	bne.n	80025c2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 ff26 	bl	800340c <I2C_SlaveReceive_RXNE>
 80025c0:	e014      	b.n	80025ec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00e      	beq.n	80025ec <HAL_I2C_EV_IRQHandler+0x2dc>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	0a5b      	lsrs	r3, r3, #9
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 ff54 	bl	8003488 <I2C_SlaveReceive_BTF>
 80025e0:	e004      	b.n	80025ec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80025e2:	bf00      	nop
 80025e4:	e002      	b.n	80025ec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b08a      	sub	sp, #40	; 0x28
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002614:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_I2C_ER_IRQHandler+0x5e>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d010      	beq.n	8002650 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800263e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	0a5b      	lsrs	r3, r3, #9
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00e      	beq.n	800267a <HAL_I2C_ER_IRQHandler+0x88>
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	f043 0302 	orr.w	r3, r3, #2
 800266e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002678:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	0a9b      	lsrs	r3, r3, #10
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d03f      	beq.n	8002706 <HAL_I2C_ER_IRQHandler+0x114>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d039      	beq.n	8002706 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002692:	7efb      	ldrb	r3, [r7, #27]
 8002694:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80026ac:	7ebb      	ldrb	r3, [r7, #26]
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d112      	bne.n	80026d8 <HAL_I2C_ER_IRQHandler+0xe6>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10f      	bne.n	80026d8 <HAL_I2C_ER_IRQHandler+0xe6>
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	2b21      	cmp	r3, #33	; 0x21
 80026bc:	d008      	beq.n	80026d0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	2b29      	cmp	r3, #41	; 0x29
 80026c2:	d005      	beq.n	80026d0 <HAL_I2C_ER_IRQHandler+0xde>
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2b28      	cmp	r3, #40	; 0x28
 80026c8:	d106      	bne.n	80026d8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b21      	cmp	r3, #33	; 0x21
 80026ce:	d103      	bne.n	80026d8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f001 f875 	bl	80037c0 <I2C_Slave_AF>
 80026d6:	e016      	b.n	8002706 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026e0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80026ea:	7efb      	ldrb	r3, [r7, #27]
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d002      	beq.n	80026f6 <HAL_I2C_ER_IRQHandler+0x104>
 80026f0:	7efb      	ldrb	r3, [r7, #27]
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d107      	bne.n	8002706 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002704:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	0adb      	lsrs	r3, r3, #11
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00e      	beq.n	8002730 <HAL_I2C_ER_IRQHandler+0x13e>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800272e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f001 f8b0 	bl	80038a8 <I2C_ITError>
  }
}
 8002748:	bf00      	nop
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	70fb      	strb	r3, [r7, #3]
 8002792:	4613      	mov	r3, r2
 8002794:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002808:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002810:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	d150      	bne.n	80028c2 <I2C_MasterTransmit_TXE+0xc8>
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b21      	cmp	r3, #33	; 0x21
 8002824:	d14d      	bne.n	80028c2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d01d      	beq.n	8002868 <I2C_MasterTransmit_TXE+0x6e>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b20      	cmp	r3, #32
 8002830:	d01a      	beq.n	8002868 <I2C_MasterTransmit_TXE+0x6e>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002838:	d016      	beq.n	8002868 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002848:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2211      	movs	r2, #17
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7fe fcb1 	bl	80011c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002866:	e060      	b.n	800292a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002876:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002886:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d107      	bne.n	80028b2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ff81 	bl	80027b2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028b0:	e03b      	b.n	800292a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fc84 	bl	80011c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028c0:	e033      	b.n	800292a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	2b21      	cmp	r3, #33	; 0x21
 80028c6:	d005      	beq.n	80028d4 <I2C_MasterTransmit_TXE+0xda>
 80028c8:	7bbb      	ldrb	r3, [r7, #14]
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d12d      	bne.n	800292a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b22      	cmp	r3, #34	; 0x22
 80028d2:	d12a      	bne.n	800292a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d108      	bne.n	80028f0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80028ee:	e01c      	b.n	800292a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d103      	bne.n	8002904 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f88e 	bl	8002a1e <I2C_MemoryTransmit_TXE_BTF>
}
 8002902:	e012      	b.n	800292a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002928:	e7ff      	b.n	800292a <I2C_MasterTransmit_TXE+0x130>
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b21      	cmp	r3, #33	; 0x21
 800294a:	d164      	bne.n	8002a16 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d012      	beq.n	800297c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800297a:	e04c      	b.n	8002a16 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b08      	cmp	r3, #8
 8002980:	d01d      	beq.n	80029be <I2C_MasterTransmit_BTF+0x8c>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b20      	cmp	r3, #32
 8002986:	d01a      	beq.n	80029be <I2C_MasterTransmit_BTF+0x8c>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800298e:	d016      	beq.n	80029be <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800299e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2211      	movs	r2, #17
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fc06 	bl	80011c8 <HAL_I2C_MasterTxCpltCallback>
}
 80029bc:	e02b      	b.n	8002a16 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029cc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029dc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d107      	bne.n	8002a08 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff fed6 	bl	80027b2 <HAL_I2C_MemTxCpltCallback>
}
 8002a06:	e006      	b.n	8002a16 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fe fbd9 	bl	80011c8 <HAL_I2C_MasterTxCpltCallback>
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11d      	bne.n	8002a72 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10b      	bne.n	8002a56 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4e:	1c9a      	adds	r2, r3, #2
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002a54:	e077      	b.n	8002b46 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	121b      	asrs	r3, r3, #8
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a70:	e069      	b.n	8002b46 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d10b      	bne.n	8002a92 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a90:	e059      	b.n	8002b46 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d152      	bne.n	8002b40 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b22      	cmp	r3, #34	; 0x22
 8002a9e:	d10d      	bne.n	8002abc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aae:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002aba:	e044      	b.n	8002b46 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d015      	beq.n	8002af2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	2b21      	cmp	r3, #33	; 0x21
 8002aca:	d112      	bne.n	8002af2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002af0:	e029      	b.n	8002b46 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d124      	bne.n	8002b46 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b21      	cmp	r3, #33	; 0x21
 8002b00:	d121      	bne.n	8002b46 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b10:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b20:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff fe3a 	bl	80027b2 <HAL_I2C_MemTxCpltCallback>
}
 8002b3e:	e002      	b.n	8002b46 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fad3 	bl	80020ec <I2C_Flush_DR>
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b22      	cmp	r3, #34	; 0x22
 8002b60:	f040 80b9 	bne.w	8002cd6 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d921      	bls.n	8002bbc <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	f040 8096 	bne.w	8002cd6 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002bba:	e08c      	b.n	8002cd6 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d07f      	beq.n	8002cc4 <I2C_MasterReceive_RXNE+0x176>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d002      	beq.n	8002bd0 <I2C_MasterReceive_RXNE+0x82>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d179      	bne.n	8002cc4 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f001 fa6f 	bl	80040b4 <I2C_WaitOnSTOPRequestThroughIT>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d14c      	bne.n	8002c76 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bfa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d10a      	bne.n	8002c4c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fdbd 	bl	80027c4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c4a:	e044      	b.n	8002cd6 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d002      	beq.n	8002c60 <I2C_MasterReceive_RXNE+0x112>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d103      	bne.n	8002c68 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
 8002c66:	e002      	b.n	8002c6e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2212      	movs	r2, #18
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fd6e 	bl	8002750 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c74:	e02f      	b.n	8002cd6 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c84:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fd8a 	bl	80027d6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cc2:	e008      	b.n	8002cd6 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd2:	605a      	str	r2, [r3, #4]
}
 8002cd4:	e7ff      	b.n	8002cd6 <I2C_MasterReceive_RXNE+0x188>
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d11b      	bne.n	8002d2e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d04:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002d2c:	e0c4      	b.n	8002eb8 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d129      	bne.n	8002d8c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d46:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d00a      	beq.n	8002d64 <I2C_MasterReceive_BTF+0x86>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d007      	beq.n	8002d64 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d8a:	e095      	b.n	8002eb8 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d17d      	bne.n	8002e92 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d002      	beq.n	8002da2 <I2C_MasterReceive_BTF+0xc4>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d108      	bne.n	8002db4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e016      	b.n	8002de2 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d002      	beq.n	8002dc0 <I2C_MasterReceive_BTF+0xe2>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d108      	bne.n	8002dd2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e007      	b.n	8002de2 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e3c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d10a      	bne.n	8002e68 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fcaf 	bl	80027c4 <HAL_I2C_MemRxCpltCallback>
}
 8002e66:	e027      	b.n	8002eb8 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d002      	beq.n	8002e7c <I2C_MasterReceive_BTF+0x19e>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d103      	bne.n	8002e84 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
 8002e82:	e002      	b.n	8002e8a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2212      	movs	r2, #18
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fc60 	bl	8002750 <HAL_I2C_MasterRxCpltCallback>
}
 8002e90:	e012      	b.n	8002eb8 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d117      	bne.n	8002f04 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eec:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002eee:	e067      	b.n	8002fc0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	611a      	str	r2, [r3, #16]
}
 8002f02:	e05d      	b.n	8002fc0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f0c:	d133      	bne.n	8002f76 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b21      	cmp	r3, #33	; 0x21
 8002f18:	d109      	bne.n	8002f2e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f2a:	611a      	str	r2, [r3, #16]
 8002f2c:	e008      	b.n	8002f40 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <I2C_Master_SB+0x92>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d032      	beq.n	8002fc0 <I2C_Master_SB+0x100>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d02d      	beq.n	8002fc0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f72:	605a      	str	r2, [r3, #4]
}
 8002f74:	e024      	b.n	8002fc0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10e      	bne.n	8002f9c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	11db      	asrs	r3, r3, #7
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f003 0306 	and.w	r3, r3, #6
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f063 030f 	orn	r3, r3, #15
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	611a      	str	r2, [r3, #16]
}
 8002f9a:	e011      	b.n	8002fc0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10d      	bne.n	8002fc0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	11db      	asrs	r3, r3, #7
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f003 0306 	and.w	r3, r3, #6
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f063 030e 	orn	r3, r3, #14
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	611a      	str	r2, [r3, #16]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <I2C_Master_ADD10+0x26>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d108      	bne.n	8003002 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00c      	beq.n	8003012 <I2C_Master_ADD10+0x48>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003010:	605a      	str	r2, [r3, #4]
  }
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800301c:	b480      	push	{r7}
 800301e:	b091      	sub	sp, #68	; 0x44
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800302a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b22      	cmp	r3, #34	; 0x22
 8003044:	f040 8174 	bne.w	8003330 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10f      	bne.n	8003070 <I2C_Master_ADDR+0x54>
 8003050:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d10b      	bne.n	8003070 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003058:	2300      	movs	r3, #0
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	633b      	str	r3, [r7, #48]	; 0x30
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	e16b      	b.n	8003348 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11d      	bne.n	80030b4 <I2C_Master_ADDR+0x98>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003080:	d118      	bne.n	80030b4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	651a      	str	r2, [r3, #80]	; 0x50
 80030b2:	e149      	b.n	8003348 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d113      	bne.n	80030e6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030be:	2300      	movs	r3, #0
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e120      	b.n	8003328 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 808a 	bne.w	8003206 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030f8:	d137      	bne.n	800316a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003108:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003118:	d113      	bne.n	8003142 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003128:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	e0f2      	b.n	8003328 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	623b      	str	r3, [r7, #32]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	623b      	str	r3, [r7, #32]
 8003156:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	e0de      	b.n	8003328 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	2b08      	cmp	r3, #8
 800316e:	d02e      	beq.n	80031ce <I2C_Master_ADDR+0x1b2>
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	2b20      	cmp	r3, #32
 8003174:	d02b      	beq.n	80031ce <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003178:	2b12      	cmp	r3, #18
 800317a:	d102      	bne.n	8003182 <I2C_Master_ADDR+0x166>
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	2b01      	cmp	r3, #1
 8003180:	d125      	bne.n	80031ce <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	2b04      	cmp	r3, #4
 8003186:	d00e      	beq.n	80031a6 <I2C_Master_ADDR+0x18a>
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	2b02      	cmp	r3, #2
 800318c:	d00b      	beq.n	80031a6 <I2C_Master_ADDR+0x18a>
 800318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003190:	2b10      	cmp	r3, #16
 8003192:	d008      	beq.n	80031a6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e007      	b.n	80031b6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	e0ac      	b.n	8003328 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031dc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e090      	b.n	8003328 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d158      	bne.n	80032c2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	2b04      	cmp	r3, #4
 8003214:	d021      	beq.n	800325a <I2C_Master_ADDR+0x23e>
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	2b02      	cmp	r3, #2
 800321a:	d01e      	beq.n	800325a <I2C_Master_ADDR+0x23e>
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	2b10      	cmp	r3, #16
 8003220:	d01b      	beq.n	800325a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003230:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e012      	b.n	8003280 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003268:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328e:	d14b      	bne.n	8003328 <I2C_Master_ADDR+0x30c>
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003296:	d00b      	beq.n	80032b0 <I2C_Master_ADDR+0x294>
 8003298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329a:	2b01      	cmp	r3, #1
 800329c:	d008      	beq.n	80032b0 <I2C_Master_ADDR+0x294>
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d005      	beq.n	80032b0 <I2C_Master_ADDR+0x294>
 80032a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d002      	beq.n	80032b0 <I2C_Master_ADDR+0x294>
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d13b      	bne.n	8003328 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	e032      	b.n	8003328 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032d0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e0:	d117      	bne.n	8003312 <I2C_Master_ADDR+0x2f6>
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032e8:	d00b      	beq.n	8003302 <I2C_Master_ADDR+0x2e6>
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d008      	beq.n	8003302 <I2C_Master_ADDR+0x2e6>
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d005      	beq.n	8003302 <I2C_Master_ADDR+0x2e6>
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d002      	beq.n	8003302 <I2C_Master_ADDR+0x2e6>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d107      	bne.n	8003312 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003310:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800332e:	e00b      	b.n	8003348 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
}
 8003346:	e7ff      	b.n	8003348 <I2C_Master_ADDR+0x32c>
 8003348:	bf00      	nop
 800334a:	3744      	adds	r7, #68	; 0x44
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d02b      	beq.n	80033c4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d114      	bne.n	80033c4 <I2C_SlaveTransmit_TXE+0x72>
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b29      	cmp	r3, #41	; 0x29
 800339e:	d111      	bne.n	80033c4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2221      	movs	r2, #33	; 0x21
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2228      	movs	r2, #40	; 0x28
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff f9cf 	bl	8002762 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d011      	beq.n	8003402 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	781a      	ldrb	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d02c      	beq.n	8003480 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d114      	bne.n	8003480 <I2C_SlaveReceive_RXNE+0x74>
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b2a      	cmp	r3, #42	; 0x2a
 800345a:	d111      	bne.n	8003480 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800346a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2222      	movs	r2, #34	; 0x22
 8003470:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2228      	movs	r2, #40	; 0x28
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff f97a 	bl	8002774 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d012      	beq.n	80034c0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr

080034ca <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034e4:	2b28      	cmp	r3, #40	; 0x28
 80034e6:	d127      	bne.n	8003538 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	09db      	lsrs	r3, r3, #7
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	81bb      	strh	r3, [r7, #12]
 800351a:	e002      	b.n	8003522 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800352a:	89ba      	ldrh	r2, [r7, #12]
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff f928 	bl	8002786 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003536:	e00e      	b.n	8003556 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800357e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035bc:	d172      	bne.n	80036a4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b22      	cmp	r3, #34	; 0x22
 80035c2:	d002      	beq.n	80035ca <I2C_Slave_STOPF+0x6a>
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	2b2a      	cmp	r3, #42	; 0x2a
 80035c8:	d135      	bne.n	8003636 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f043 0204 	orr.w	r2, r3, #4
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fa32 	bl	8001a6c <HAL_DMA_GetState>
 8003608:	4603      	mov	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d049      	beq.n	80036a2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	4a69      	ldr	r2, [pc, #420]	; (80037b8 <I2C_Slave_STOPF+0x258>)
 8003614:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe f9ae 	bl	800197c <HAL_DMA_Abort_IT>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d03d      	beq.n	80036a2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003630:	4610      	mov	r0, r2
 8003632:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003634:	e035      	b.n	80036a2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	b29a      	uxth	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f043 0204 	orr.w	r2, r3, #4
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003668:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe f9fc 	bl	8001a6c <HAL_DMA_GetState>
 8003674:	4603      	mov	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d014      	beq.n	80036a4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	4a4e      	ldr	r2, [pc, #312]	; (80037b8 <I2C_Slave_STOPF+0x258>)
 8003680:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe f978 	bl	800197c <HAL_DMA_Abort_IT>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800369c:	4610      	mov	r0, r2
 800369e:	4798      	blx	r3
 80036a0:	e000      	b.n	80036a4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036a2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d03e      	beq.n	800372c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d112      	bne.n	80036e2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d112      	bne.n	8003716 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f043 0204 	orr.w	r2, r3, #4
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f8b7 	bl	80038a8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800373a:	e039      	b.n	80037b0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b2a      	cmp	r3, #42	; 0x2a
 8003740:	d109      	bne.n	8003756 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2228      	movs	r2, #40	; 0x28
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff f80f 	bl	8002774 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b28      	cmp	r3, #40	; 0x28
 8003760:	d111      	bne.n	8003786 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a15      	ldr	r2, [pc, #84]	; (80037bc <I2C_Slave_STOPF+0x25c>)
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff f80e 	bl	80027a0 <HAL_I2C_ListenCpltCallback>
}
 8003784:	e014      	b.n	80037b0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	2b22      	cmp	r3, #34	; 0x22
 800378c:	d002      	beq.n	8003794 <I2C_Slave_STOPF+0x234>
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	2b22      	cmp	r3, #34	; 0x22
 8003792:	d10d      	bne.n	80037b0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fe ffe2 	bl	8002774 <HAL_I2C_SlaveRxCpltCallback>
}
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	08003c11 	.word	0x08003c11
 80037bc:	ffff0000 	.word	0xffff0000

080037c0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d002      	beq.n	80037e2 <I2C_Slave_AF+0x22>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d129      	bne.n	8003836 <I2C_Slave_AF+0x76>
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	2b28      	cmp	r3, #40	; 0x28
 80037e6:	d126      	bne.n	8003836 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a2e      	ldr	r2, [pc, #184]	; (80038a4 <I2C_Slave_AF+0xe4>)
 80037ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037fc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003806:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003816:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe ffb6 	bl	80027a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003834:	e031      	b.n	800389a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b21      	cmp	r3, #33	; 0x21
 800383a:	d129      	bne.n	8003890 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <I2C_Slave_AF+0xe4>)
 8003840:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2221      	movs	r2, #33	; 0x21
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003866:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003870:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003880:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fe fc32 	bl	80020ec <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fe ff6a 	bl	8002762 <HAL_I2C_SlaveTxCpltCallback>
}
 800388e:	e004      	b.n	800389a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003898:	615a      	str	r2, [r3, #20]
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	ffff0000 	.word	0xffff0000

080038a8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038c0:	7bbb      	ldrb	r3, [r7, #14]
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d002      	beq.n	80038cc <I2C_ITError+0x24>
 80038c6:	7bbb      	ldrb	r3, [r7, #14]
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d10a      	bne.n	80038e2 <I2C_ITError+0x3a>
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b22      	cmp	r3, #34	; 0x22
 80038d0:	d107      	bne.n	80038e2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038e8:	2b28      	cmp	r3, #40	; 0x28
 80038ea:	d107      	bne.n	80038fc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2228      	movs	r2, #40	; 0x28
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038fa:	e015      	b.n	8003928 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800390a:	d00a      	beq.n	8003922 <I2C_ITError+0x7a>
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b60      	cmp	r3, #96	; 0x60
 8003910:	d007      	beq.n	8003922 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003936:	d162      	bne.n	80039fe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003946:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d020      	beq.n	8003998 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395a:	4a6a      	ldr	r2, [pc, #424]	; (8003b04 <I2C_ITError+0x25c>)
 800395c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe f80a 	bl	800197c <HAL_DMA_Abort_IT>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8089 	beq.w	8003a82 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003992:	4610      	mov	r0, r2
 8003994:	4798      	blx	r3
 8003996:	e074      	b.n	8003a82 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	4a59      	ldr	r2, [pc, #356]	; (8003b04 <I2C_ITError+0x25c>)
 800399e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd ffe9 	bl	800197c <HAL_DMA_Abort_IT>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d068      	beq.n	8003a82 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d10b      	bne.n	80039d6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039f8:	4610      	mov	r0, r2
 80039fa:	4798      	blx	r3
 80039fc:	e041      	b.n	8003a82 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b60      	cmp	r3, #96	; 0x60
 8003a08:	d125      	bne.n	8003a56 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a22:	2b40      	cmp	r3, #64	; 0x40
 8003a24:	d10b      	bne.n	8003a3e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fe feca 	bl	80027e8 <HAL_I2C_AbortCpltCallback>
 8003a54:	e015      	b.n	8003a82 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	d10b      	bne.n	8003a7c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fe feaa 	bl	80027d6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10e      	bne.n	8003ab0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d104      	bne.n	8003ab0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003abe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d113      	bne.n	8003afc <I2C_ITError+0x254>
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b28      	cmp	r3, #40	; 0x28
 8003ad8:	d110      	bne.n	8003afc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <I2C_ITError+0x260>)
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fe fe52 	bl	80027a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	08003c11 	.word	0x08003c11
 8003b08:	ffff0000 	.word	0xffff0000

08003b0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d006      	beq.n	8003b36 <I2C_MasterRequestWrite+0x2a>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d003      	beq.n	8003b36 <I2C_MasterRequestWrite+0x2a>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b34:	d108      	bne.n	8003b48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e00b      	b.n	8003b60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	2b12      	cmp	r3, #18
 8003b4e:	d107      	bne.n	8003b60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f8f7 	bl	8003d60 <I2C_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00d      	beq.n	8003b94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b86:	d103      	bne.n	8003b90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e035      	b.n	8003c00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b9c:	d108      	bne.n	8003bb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b9e:	897b      	ldrh	r3, [r7, #10]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bac:	611a      	str	r2, [r3, #16]
 8003bae:	e01b      	b.n	8003be8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bb0:	897b      	ldrh	r3, [r7, #10]
 8003bb2:	11db      	asrs	r3, r3, #7
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	f003 0306 	and.w	r3, r3, #6
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f063 030f 	orn	r3, r3, #15
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	490e      	ldr	r1, [pc, #56]	; (8003c08 <I2C_MasterRequestWrite+0xfc>)
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f940 	bl	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e010      	b.n	8003c00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bde:	897b      	ldrh	r3, [r7, #10]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4907      	ldr	r1, [pc, #28]	; (8003c0c <I2C_MasterRequestWrite+0x100>)
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f930 	bl	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	00010008 	.word	0x00010008
 8003c0c:	00010002 	.word	0x00010002

08003c10 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c28:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c2a:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <I2C_DMAAbort+0x148>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	08db      	lsrs	r3, r3, #3
 8003c30:	4a4a      	ldr	r2, [pc, #296]	; (8003d5c <I2C_DMAAbort+0x14c>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	0a1a      	lsrs	r2, r3, #8
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00da      	lsls	r2, r3, #3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003c56:	e00a      	b.n	8003c6e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6c:	d0ea      	beq.n	8003c44 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0201 	bic.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b60      	cmp	r3, #96	; 0x60
 8003cde:	d10e      	bne.n	8003cfe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cf6:	6978      	ldr	r0, [r7, #20]
 8003cf8:	f7fe fd76 	bl	80027e8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cfc:	e027      	b.n	8003d4e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d04:	2b28      	cmp	r3, #40	; 0x28
 8003d06:	d117      	bne.n	8003d38 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2228      	movs	r2, #40	; 0x28
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d36:	e007      	b.n	8003d48 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d48:	6978      	ldr	r0, [r7, #20]
 8003d4a:	f7fe fd44 	bl	80027d6 <HAL_I2C_ErrorCallback>
}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000028 	.word	0x20000028
 8003d5c:	14f8b589 	.word	0x14f8b589

08003d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d70:	e048      	b.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d044      	beq.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fd fcc3 	bl	8001704 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d139      	bne.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d10d      	bne.n	8003db6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	43da      	mvns	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4013      	ands	r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	e00c      	b.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d116      	bne.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e023      	b.n	8003e4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	0c1b      	lsrs	r3, r3, #16
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d10d      	bne.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	43da      	mvns	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	e00c      	b.n	8003e44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	43da      	mvns	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d093      	beq.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e62:	e071      	b.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e72:	d123      	bne.n	8003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	f043 0204 	orr.w	r2, r3, #4
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e067      	b.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d041      	beq.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec4:	f7fd fc1e 	bl	8001704 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d302      	bcc.n	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d136      	bne.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d10c      	bne.n	8003efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	43da      	mvns	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf14      	ite	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	2300      	moveq	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	e00b      	b.n	8003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	43da      	mvns	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf14      	ite	ne
 8003f10:	2301      	movne	r3, #1
 8003f12:	2300      	moveq	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e021      	b.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	0c1b      	lsrs	r3, r3, #16
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d10c      	bne.n	8003f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	43da      	mvns	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e00b      	b.n	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	43da      	mvns	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f47f af6d 	bne.w	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa0:	e034      	b.n	800400c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f8b8 	bl	8004118 <I2C_IsAcknowledgeFailed>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e034      	b.n	800401c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d028      	beq.n	800400c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fd fba3 	bl	8001704 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d11d      	bne.n	800400c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fda:	2b80      	cmp	r3, #128	; 0x80
 8003fdc:	d016      	beq.n	800400c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f043 0220 	orr.w	r2, r3, #32
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e007      	b.n	800401c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b80      	cmp	r3, #128	; 0x80
 8004018:	d1c3      	bne.n	8003fa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004030:	e034      	b.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f870 	bl	8004118 <I2C_IsAcknowledgeFailed>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e034      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d028      	beq.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fd fb5b 	bl	8001704 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11d      	bne.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b04      	cmp	r3, #4
 800406c:	d016      	beq.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e007      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d1c3      	bne.n	8004032 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	4a13      	ldr	r2, [pc, #76]	; (8004114 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	0a1a      	lsrs	r2, r3, #8
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d107      	bne.n	80040f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f043 0220 	orr.w	r2, r3, #32
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e008      	b.n	8004104 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004100:	d0e9      	beq.n	80040d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000028 	.word	0x20000028
 8004114:	14f8b589 	.word	0x14f8b589

08004118 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d11b      	bne.n	8004168 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004138:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	f043 0204 	orr.w	r2, r3, #4
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004184:	d103      	bne.n	800418e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800418c:	e007      	b.n	800419e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004196:	d102      	bne.n	800419e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2208      	movs	r2, #8
 800419c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e272      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8087 	beq.w	80042d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041c8:	4b92      	ldr	r3, [pc, #584]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d00c      	beq.n	80041ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041d4:	4b8f      	ldr	r3, [pc, #572]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d112      	bne.n	8004206 <HAL_RCC_OscConfig+0x5e>
 80041e0:	4b8c      	ldr	r3, [pc, #560]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ec:	d10b      	bne.n	8004206 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ee:	4b89      	ldr	r3, [pc, #548]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d06c      	beq.n	80042d4 <HAL_RCC_OscConfig+0x12c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d168      	bne.n	80042d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e24c      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x76>
 8004210:	4b80      	ldr	r3, [pc, #512]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a7f      	ldr	r2, [pc, #508]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	e02e      	b.n	800427c <HAL_RCC_OscConfig+0xd4>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x98>
 8004226:	4b7b      	ldr	r3, [pc, #492]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a7a      	ldr	r2, [pc, #488]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b78      	ldr	r3, [pc, #480]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a77      	ldr	r2, [pc, #476]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e01d      	b.n	800427c <HAL_RCC_OscConfig+0xd4>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0xbc>
 800424a:	4b72      	ldr	r3, [pc, #456]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a71      	ldr	r2, [pc, #452]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b6f      	ldr	r3, [pc, #444]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6e      	ldr	r2, [pc, #440]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0xd4>
 8004264:	4b6b      	ldr	r3, [pc, #428]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6a      	ldr	r2, [pc, #424]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b68      	ldr	r3, [pc, #416]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a67      	ldr	r2, [pc, #412]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fd fa3e 	bl	8001704 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd fa3a 	bl	8001704 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e200      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b5d      	ldr	r3, [pc, #372]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0xe4>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fd fa2a 	bl	8001704 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd fa26 	bl	8001704 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e1ec      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	4b53      	ldr	r3, [pc, #332]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x10c>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d063      	beq.n	80043aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042e2:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042ee:	4b49      	ldr	r3, [pc, #292]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d11c      	bne.n	8004334 <HAL_RCC_OscConfig+0x18c>
 80042fa:	4b46      	ldr	r3, [pc, #280]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d116      	bne.n	8004334 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	4b43      	ldr	r3, [pc, #268]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RCC_OscConfig+0x176>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d001      	beq.n	800431e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e1c0      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	4b3d      	ldr	r3, [pc, #244]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4939      	ldr	r1, [pc, #228]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004332:	e03a      	b.n	80043aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433c:	4b36      	ldr	r3, [pc, #216]	; (8004418 <HAL_RCC_OscConfig+0x270>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7fd f9df 	bl	8001704 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434a:	f7fd f9db 	bl	8001704 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e1a1      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4b2a      	ldr	r3, [pc, #168]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4927      	ldr	r1, [pc, #156]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]
 800437c:	e015      	b.n	80043aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437e:	4b26      	ldr	r3, [pc, #152]	; (8004418 <HAL_RCC_OscConfig+0x270>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fd f9be 	bl	8001704 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438c:	f7fd f9ba 	bl	8001704 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e180      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d03a      	beq.n	800442c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d019      	beq.n	80043f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043be:	4b17      	ldr	r3, [pc, #92]	; (800441c <HAL_RCC_OscConfig+0x274>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c4:	f7fd f99e 	bl	8001704 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fd f99a 	bl	8001704 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e160      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043ea:	2001      	movs	r0, #1
 80043ec:	f000 faba 	bl	8004964 <RCC_Delay>
 80043f0:	e01c      	b.n	800442c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f2:	4b0a      	ldr	r3, [pc, #40]	; (800441c <HAL_RCC_OscConfig+0x274>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f8:	f7fd f984 	bl	8001704 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043fe:	e00f      	b.n	8004420 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004400:	f7fd f980 	bl	8001704 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d908      	bls.n	8004420 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e146      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	42420000 	.word	0x42420000
 800441c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004420:	4b92      	ldr	r3, [pc, #584]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e9      	bne.n	8004400 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80a6 	beq.w	8004586 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800443e:	4b8b      	ldr	r3, [pc, #556]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10d      	bne.n	8004466 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	4b88      	ldr	r3, [pc, #544]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4a87      	ldr	r2, [pc, #540]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004454:	61d3      	str	r3, [r2, #28]
 8004456:	4b85      	ldr	r3, [pc, #532]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004466:	4b82      	ldr	r3, [pc, #520]	; (8004670 <HAL_RCC_OscConfig+0x4c8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d118      	bne.n	80044a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004472:	4b7f      	ldr	r3, [pc, #508]	; (8004670 <HAL_RCC_OscConfig+0x4c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a7e      	ldr	r2, [pc, #504]	; (8004670 <HAL_RCC_OscConfig+0x4c8>)
 8004478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447e:	f7fd f941 	bl	8001704 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004486:	f7fd f93d 	bl	8001704 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b64      	cmp	r3, #100	; 0x64
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e103      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	4b75      	ldr	r3, [pc, #468]	; (8004670 <HAL_RCC_OscConfig+0x4c8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d106      	bne.n	80044ba <HAL_RCC_OscConfig+0x312>
 80044ac:	4b6f      	ldr	r3, [pc, #444]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	4a6e      	ldr	r2, [pc, #440]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6213      	str	r3, [r2, #32]
 80044b8:	e02d      	b.n	8004516 <HAL_RCC_OscConfig+0x36e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10c      	bne.n	80044dc <HAL_RCC_OscConfig+0x334>
 80044c2:	4b6a      	ldr	r3, [pc, #424]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a69      	ldr	r2, [pc, #420]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	6213      	str	r3, [r2, #32]
 80044ce:	4b67      	ldr	r3, [pc, #412]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4a66      	ldr	r2, [pc, #408]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	f023 0304 	bic.w	r3, r3, #4
 80044d8:	6213      	str	r3, [r2, #32]
 80044da:	e01c      	b.n	8004516 <HAL_RCC_OscConfig+0x36e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b05      	cmp	r3, #5
 80044e2:	d10c      	bne.n	80044fe <HAL_RCC_OscConfig+0x356>
 80044e4:	4b61      	ldr	r3, [pc, #388]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4a60      	ldr	r2, [pc, #384]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	f043 0304 	orr.w	r3, r3, #4
 80044ee:	6213      	str	r3, [r2, #32]
 80044f0:	4b5e      	ldr	r3, [pc, #376]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4a5d      	ldr	r2, [pc, #372]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6213      	str	r3, [r2, #32]
 80044fc:	e00b      	b.n	8004516 <HAL_RCC_OscConfig+0x36e>
 80044fe:	4b5b      	ldr	r3, [pc, #364]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4a5a      	ldr	r2, [pc, #360]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	6213      	str	r3, [r2, #32]
 800450a:	4b58      	ldr	r3, [pc, #352]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	4a57      	ldr	r2, [pc, #348]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d015      	beq.n	800454a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451e:	f7fd f8f1 	bl	8001704 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	e00a      	b.n	800453c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fd f8ed 	bl	8001704 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	; 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e0b1      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453c:	4b4b      	ldr	r3, [pc, #300]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0ee      	beq.n	8004526 <HAL_RCC_OscConfig+0x37e>
 8004548:	e014      	b.n	8004574 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454a:	f7fd f8db 	bl	8001704 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004550:	e00a      	b.n	8004568 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fd f8d7 	bl	8001704 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e09b      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004568:	4b40      	ldr	r3, [pc, #256]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ee      	bne.n	8004552 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457a:	4b3c      	ldr	r3, [pc, #240]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	4a3b      	ldr	r2, [pc, #236]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004584:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 8087 	beq.w	800469e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004590:	4b36      	ldr	r3, [pc, #216]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b08      	cmp	r3, #8
 800459a:	d061      	beq.n	8004660 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d146      	bne.n	8004632 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a4:	4b33      	ldr	r3, [pc, #204]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fd f8ab 	bl	8001704 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b2:	f7fd f8a7 	bl	8001704 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e06d      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c4:	4b29      	ldr	r3, [pc, #164]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d8:	d108      	bne.n	80045ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045da:	4b24      	ldr	r3, [pc, #144]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	4921      	ldr	r1, [pc, #132]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ec:	4b1f      	ldr	r3, [pc, #124]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a19      	ldr	r1, [r3, #32]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	430b      	orrs	r3, r1
 80045fe:	491b      	ldr	r1, [pc, #108]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460a:	f7fd f87b 	bl	8001704 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004612:	f7fd f877 	bl	8001704 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e03d      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x46a>
 8004630:	e035      	b.n	800469e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fd f864 	bl	8001704 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fd f860 	bl	8001704 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e026      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x498>
 800465e:	e01e      	b.n	800469e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d107      	bne.n	8004678 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e019      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
 800466c:	40021000 	.word	0x40021000
 8004670:	40007000 	.word	0x40007000
 8004674:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <HAL_RCC_OscConfig+0x500>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	429a      	cmp	r2, r3
 800468a:	d106      	bne.n	800469a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d001      	beq.n	800469e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40021000 	.word	0x40021000

080046ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0d0      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046c0:	4b6a      	ldr	r3, [pc, #424]	; (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d910      	bls.n	80046f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b67      	ldr	r3, [pc, #412]	; (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 0207 	bic.w	r2, r3, #7
 80046d6:	4965      	ldr	r1, [pc, #404]	; (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b63      	ldr	r3, [pc, #396]	; (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0b8      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004708:	4b59      	ldr	r3, [pc, #356]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a58      	ldr	r2, [pc, #352]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004712:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004720:	4b53      	ldr	r3, [pc, #332]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4a52      	ldr	r2, [pc, #328]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004726:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800472a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800472c:	4b50      	ldr	r3, [pc, #320]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	494d      	ldr	r1, [pc, #308]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d040      	beq.n	80047cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	4b47      	ldr	r3, [pc, #284]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d115      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e07f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d107      	bne.n	800477a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476a:	4b41      	ldr	r3, [pc, #260]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e073      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477a:	4b3d      	ldr	r3, [pc, #244]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e06b      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478a:	4b39      	ldr	r3, [pc, #228]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f023 0203 	bic.w	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4936      	ldr	r1, [pc, #216]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800479c:	f7fc ffb2 	bl	8001704 <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a4:	f7fc ffae 	bl	8001704 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e053      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ba:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 020c 	and.w	r2, r3, #12
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d1eb      	bne.n	80047a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047cc:	4b27      	ldr	r3, [pc, #156]	; (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d210      	bcs.n	80047fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b24      	ldr	r3, [pc, #144]	; (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 0207 	bic.w	r2, r3, #7
 80047e2:	4922      	ldr	r1, [pc, #136]	; (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b20      	ldr	r3, [pc, #128]	; (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e032      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004808:	4b19      	ldr	r3, [pc, #100]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4916      	ldr	r1, [pc, #88]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	490e      	ldr	r1, [pc, #56]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800483a:	f000 f821 	bl	8004880 <HAL_RCC_GetSysClockFreq>
 800483e:	4602      	mov	r2, r0
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	490a      	ldr	r1, [pc, #40]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800484c:	5ccb      	ldrb	r3, [r1, r3]
 800484e:	fa22 f303 	lsr.w	r3, r2, r3
 8004852:	4a09      	ldr	r2, [pc, #36]	; (8004878 <HAL_RCC_ClockConfig+0x1cc>)
 8004854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <HAL_RCC_ClockConfig+0x1d0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7fc ff10 	bl	8001680 <HAL_InitTick>

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40022000 	.word	0x40022000
 8004870:	40021000 	.word	0x40021000
 8004874:	08005b70 	.word	0x08005b70
 8004878:	20000028 	.word	0x20000028
 800487c:	20000030 	.word	0x20000030

08004880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800489a:	4b1e      	ldr	r3, [pc, #120]	; (8004914 <HAL_RCC_GetSysClockFreq+0x94>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d002      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x30>
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_GetSysClockFreq+0x36>
 80048ae:	e027      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_RCC_GetSysClockFreq+0x98>)
 80048b2:	613b      	str	r3, [r7, #16]
      break;
 80048b4:	e027      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	0c9b      	lsrs	r3, r3, #18
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	4a17      	ldr	r2, [pc, #92]	; (800491c <HAL_RCC_GetSysClockFreq+0x9c>)
 80048c0:	5cd3      	ldrb	r3, [r2, r3]
 80048c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d010      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <HAL_RCC_GetSysClockFreq+0x94>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	0c5b      	lsrs	r3, r3, #17
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	4a11      	ldr	r2, [pc, #68]	; (8004920 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048da:	5cd3      	ldrb	r3, [r2, r3]
 80048dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a0d      	ldr	r2, [pc, #52]	; (8004918 <HAL_RCC_GetSysClockFreq+0x98>)
 80048e2:	fb03 f202 	mul.w	r2, r3, r2
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e004      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	613b      	str	r3, [r7, #16]
      break;
 80048fe:	e002      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_GetSysClockFreq+0x98>)
 8004902:	613b      	str	r3, [r7, #16]
      break;
 8004904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004906:	693b      	ldr	r3, [r7, #16]
}
 8004908:	4618      	mov	r0, r3
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	007a1200 	.word	0x007a1200
 800491c:	08005b88 	.word	0x08005b88
 8004920:	08005b98 	.word	0x08005b98
 8004924:	003d0900 	.word	0x003d0900

08004928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800492c:	4b02      	ldr	r3, [pc, #8]	; (8004938 <HAL_RCC_GetHCLKFreq+0x10>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	20000028 	.word	0x20000028

0800493c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004940:	f7ff fff2 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4903      	ldr	r1, [pc, #12]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000
 8004960:	08005b80 	.word	0x08005b80

08004964 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <RCC_Delay+0x34>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0a      	ldr	r2, [pc, #40]	; (800499c <RCC_Delay+0x38>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	0a5b      	lsrs	r3, r3, #9
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004980:	bf00      	nop
  }
  while (Delay --);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1e5a      	subs	r2, r3, #1
 8004986:	60fa      	str	r2, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f9      	bne.n	8004980 <RCC_Delay+0x1c>
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	20000028 	.word	0x20000028
 800499c:	10624dd3 	.word	0x10624dd3

080049a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e041      	b.n	8004a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc fc9e 	bl	8001308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f000 fa5c 	bl	8004e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d001      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e03a      	b.n	8004ace <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <HAL_TIM_Base_Start_IT+0x98>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00e      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x58>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d009      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x58>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a14      	ldr	r2, [pc, #80]	; (8004adc <HAL_TIM_Base_Start_IT+0x9c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x58>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d111      	bne.n	8004abc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b06      	cmp	r3, #6
 8004aa8:	d010      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aba:	e007      	b.n	8004acc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40000800 	.word	0x40000800

08004ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0202 	mvn.w	r2, #2
 8004b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f998 	bl	8004e64 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f98b 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f99a 	bl	8004e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d020      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01b      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0204 	mvn.w	r2, #4
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f972 	bl	8004e64 <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f965 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f974 	bl	8004e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d020      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0208 	mvn.w	r2, #8
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f94c 	bl	8004e64 <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f93f 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f94e 	bl	8004e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d020      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01b      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0210 	mvn.w	r2, #16
 8004bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2208      	movs	r2, #8
 8004c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f926 	bl	8004e64 <HAL_TIM_IC_CaptureCallback>
 8004c18:	e005      	b.n	8004c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f919 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f928 	bl	8004e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0201 	mvn.w	r2, #1
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc fab0 	bl	80011b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa7f 	bl	8005172 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f8f8 	bl	8004e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0220 	mvn.w	r2, #32
 8004cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fa52 	bl	8005160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e0b4      	b.n	8004e4a <HAL_TIM_ConfigClockSource+0x186>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d18:	d03e      	beq.n	8004d98 <HAL_TIM_ConfigClockSource+0xd4>
 8004d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1e:	f200 8087 	bhi.w	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d26:	f000 8086 	beq.w	8004e36 <HAL_TIM_ConfigClockSource+0x172>
 8004d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2e:	d87f      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b70      	cmp	r3, #112	; 0x70
 8004d32:	d01a      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0xa6>
 8004d34:	2b70      	cmp	r3, #112	; 0x70
 8004d36:	d87b      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b60      	cmp	r3, #96	; 0x60
 8004d3a:	d050      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x11a>
 8004d3c:	2b60      	cmp	r3, #96	; 0x60
 8004d3e:	d877      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b50      	cmp	r3, #80	; 0x50
 8004d42:	d03c      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0xfa>
 8004d44:	2b50      	cmp	r3, #80	; 0x50
 8004d46:	d873      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d058      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x13a>
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d86f      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d50:	2b30      	cmp	r3, #48	; 0x30
 8004d52:	d064      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x15a>
 8004d54:	2b30      	cmp	r3, #48	; 0x30
 8004d56:	d86b      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d060      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x15a>
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d867      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d05c      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x15a>
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d05a      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x15a>
 8004d68:	e062      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6899      	ldr	r1, [r3, #8]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f000 f974 	bl	8005066 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	609a      	str	r2, [r3, #8]
      break;
 8004d96:	e04f      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6899      	ldr	r1, [r3, #8]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f000 f95d 	bl	8005066 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dba:	609a      	str	r2, [r3, #8]
      break;
 8004dbc:	e03c      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f000 f8d4 	bl	8004f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2150      	movs	r1, #80	; 0x50
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f92b 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 8004ddc:	e02c      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f000 f8f2 	bl	8004fd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2160      	movs	r1, #96	; 0x60
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f91b 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 8004dfc:	e01c      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f000 f8b4 	bl	8004f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2140      	movs	r1, #64	; 0x40
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 f90b 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 8004e1c:	e00c      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f000 f902 	bl	8005032 <TIM_ITRx_SetConfig>
      break;
 8004e2e:	e003      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
      break;
 8004e34:	e000      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr

08004e76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr
	...

08004e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a2f      	ldr	r2, [pc, #188]	; (8004f6c <TIM_Base_SetConfig+0xd0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00b      	beq.n	8004ecc <TIM_Base_SetConfig+0x30>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eba:	d007      	beq.n	8004ecc <TIM_Base_SetConfig+0x30>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a2c      	ldr	r2, [pc, #176]	; (8004f70 <TIM_Base_SetConfig+0xd4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_Base_SetConfig+0x30>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a2b      	ldr	r2, [pc, #172]	; (8004f74 <TIM_Base_SetConfig+0xd8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d108      	bne.n	8004ede <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a22      	ldr	r2, [pc, #136]	; (8004f6c <TIM_Base_SetConfig+0xd0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00b      	beq.n	8004efe <TIM_Base_SetConfig+0x62>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eec:	d007      	beq.n	8004efe <TIM_Base_SetConfig+0x62>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a1f      	ldr	r2, [pc, #124]	; (8004f70 <TIM_Base_SetConfig+0xd4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d003      	beq.n	8004efe <TIM_Base_SetConfig+0x62>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a1e      	ldr	r2, [pc, #120]	; (8004f74 <TIM_Base_SetConfig+0xd8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d108      	bne.n	8004f10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a0d      	ldr	r2, [pc, #52]	; (8004f6c <TIM_Base_SetConfig+0xd0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d103      	bne.n	8004f44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f023 0201 	bic.w	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	611a      	str	r2, [r3, #16]
  }
}
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800

08004f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f023 0201 	bic.w	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f023 030a 	bic.w	r3, r3, #10
 8004fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0210 	bic.w	r2, r3, #16
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	031b      	lsls	r3, r3, #12
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005010:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	621a      	str	r2, [r3, #32]
}
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	f043 0307 	orr.w	r3, r3, #7
 8005054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	609a      	str	r2, [r3, #8]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr

08005066 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005066:	b480      	push	{r7}
 8005068:	b087      	sub	sp, #28
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005080:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	021a      	lsls	r2, r3, #8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	431a      	orrs	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4313      	orrs	r3, r2
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	609a      	str	r2, [r3, #8]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr

080050a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e046      	b.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a16      	ldr	r2, [pc, #88]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00e      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005108:	d009      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a12      	ldr	r2, [pc, #72]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a10      	ldr	r2, [pc, #64]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d10c      	bne.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	4313      	orrs	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800

08005160 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <__errno>:
 8005184:	4b01      	ldr	r3, [pc, #4]	; (800518c <__errno+0x8>)
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20000038 	.word	0x20000038

08005190 <__libc_init_array>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	2600      	movs	r6, #0
 8005194:	4d0c      	ldr	r5, [pc, #48]	; (80051c8 <__libc_init_array+0x38>)
 8005196:	4c0d      	ldr	r4, [pc, #52]	; (80051cc <__libc_init_array+0x3c>)
 8005198:	1b64      	subs	r4, r4, r5
 800519a:	10a4      	asrs	r4, r4, #2
 800519c:	42a6      	cmp	r6, r4
 800519e:	d109      	bne.n	80051b4 <__libc_init_array+0x24>
 80051a0:	f000 fc9c 	bl	8005adc <_init>
 80051a4:	2600      	movs	r6, #0
 80051a6:	4d0a      	ldr	r5, [pc, #40]	; (80051d0 <__libc_init_array+0x40>)
 80051a8:	4c0a      	ldr	r4, [pc, #40]	; (80051d4 <__libc_init_array+0x44>)
 80051aa:	1b64      	subs	r4, r4, r5
 80051ac:	10a4      	asrs	r4, r4, #2
 80051ae:	42a6      	cmp	r6, r4
 80051b0:	d105      	bne.n	80051be <__libc_init_array+0x2e>
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
 80051b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b8:	4798      	blx	r3
 80051ba:	3601      	adds	r6, #1
 80051bc:	e7ee      	b.n	800519c <__libc_init_array+0xc>
 80051be:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c2:	4798      	blx	r3
 80051c4:	3601      	adds	r6, #1
 80051c6:	e7f2      	b.n	80051ae <__libc_init_array+0x1e>
 80051c8:	08005bd0 	.word	0x08005bd0
 80051cc:	08005bd0 	.word	0x08005bd0
 80051d0:	08005bd0 	.word	0x08005bd0
 80051d4:	08005bd4 	.word	0x08005bd4

080051d8 <memset>:
 80051d8:	4603      	mov	r3, r0
 80051da:	4402      	add	r2, r0
 80051dc:	4293      	cmp	r3, r2
 80051de:	d100      	bne.n	80051e2 <memset+0xa>
 80051e0:	4770      	bx	lr
 80051e2:	f803 1b01 	strb.w	r1, [r3], #1
 80051e6:	e7f9      	b.n	80051dc <memset+0x4>

080051e8 <siprintf>:
 80051e8:	b40e      	push	{r1, r2, r3}
 80051ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051ee:	b500      	push	{lr}
 80051f0:	b09c      	sub	sp, #112	; 0x70
 80051f2:	ab1d      	add	r3, sp, #116	; 0x74
 80051f4:	9002      	str	r0, [sp, #8]
 80051f6:	9006      	str	r0, [sp, #24]
 80051f8:	9107      	str	r1, [sp, #28]
 80051fa:	9104      	str	r1, [sp, #16]
 80051fc:	4808      	ldr	r0, [pc, #32]	; (8005220 <siprintf+0x38>)
 80051fe:	4909      	ldr	r1, [pc, #36]	; (8005224 <siprintf+0x3c>)
 8005200:	f853 2b04 	ldr.w	r2, [r3], #4
 8005204:	9105      	str	r1, [sp, #20]
 8005206:	6800      	ldr	r0, [r0, #0]
 8005208:	a902      	add	r1, sp, #8
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	f000 f868 	bl	80052e0 <_svfiprintf_r>
 8005210:	2200      	movs	r2, #0
 8005212:	9b02      	ldr	r3, [sp, #8]
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	b01c      	add	sp, #112	; 0x70
 8005218:	f85d eb04 	ldr.w	lr, [sp], #4
 800521c:	b003      	add	sp, #12
 800521e:	4770      	bx	lr
 8005220:	20000038 	.word	0x20000038
 8005224:	ffff0208 	.word	0xffff0208

08005228 <__ssputs_r>:
 8005228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	688e      	ldr	r6, [r1, #8]
 800522e:	4682      	mov	sl, r0
 8005230:	429e      	cmp	r6, r3
 8005232:	460c      	mov	r4, r1
 8005234:	4690      	mov	r8, r2
 8005236:	461f      	mov	r7, r3
 8005238:	d838      	bhi.n	80052ac <__ssputs_r+0x84>
 800523a:	898a      	ldrh	r2, [r1, #12]
 800523c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005240:	d032      	beq.n	80052a8 <__ssputs_r+0x80>
 8005242:	6825      	ldr	r5, [r4, #0]
 8005244:	6909      	ldr	r1, [r1, #16]
 8005246:	3301      	adds	r3, #1
 8005248:	eba5 0901 	sub.w	r9, r5, r1
 800524c:	6965      	ldr	r5, [r4, #20]
 800524e:	444b      	add	r3, r9
 8005250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005258:	106d      	asrs	r5, r5, #1
 800525a:	429d      	cmp	r5, r3
 800525c:	bf38      	it	cc
 800525e:	461d      	movcc	r5, r3
 8005260:	0553      	lsls	r3, r2, #21
 8005262:	d531      	bpl.n	80052c8 <__ssputs_r+0xa0>
 8005264:	4629      	mov	r1, r5
 8005266:	f000 fb6f 	bl	8005948 <_malloc_r>
 800526a:	4606      	mov	r6, r0
 800526c:	b950      	cbnz	r0, 8005284 <__ssputs_r+0x5c>
 800526e:	230c      	movs	r3, #12
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	f8ca 3000 	str.w	r3, [sl]
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005284:	464a      	mov	r2, r9
 8005286:	6921      	ldr	r1, [r4, #16]
 8005288:	f000 face 	bl	8005828 <memcpy>
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005296:	81a3      	strh	r3, [r4, #12]
 8005298:	6126      	str	r6, [r4, #16]
 800529a:	444e      	add	r6, r9
 800529c:	6026      	str	r6, [r4, #0]
 800529e:	463e      	mov	r6, r7
 80052a0:	6165      	str	r5, [r4, #20]
 80052a2:	eba5 0509 	sub.w	r5, r5, r9
 80052a6:	60a5      	str	r5, [r4, #8]
 80052a8:	42be      	cmp	r6, r7
 80052aa:	d900      	bls.n	80052ae <__ssputs_r+0x86>
 80052ac:	463e      	mov	r6, r7
 80052ae:	4632      	mov	r2, r6
 80052b0:	4641      	mov	r1, r8
 80052b2:	6820      	ldr	r0, [r4, #0]
 80052b4:	f000 fac6 	bl	8005844 <memmove>
 80052b8:	68a3      	ldr	r3, [r4, #8]
 80052ba:	2000      	movs	r0, #0
 80052bc:	1b9b      	subs	r3, r3, r6
 80052be:	60a3      	str	r3, [r4, #8]
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	4433      	add	r3, r6
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	e7db      	b.n	8005280 <__ssputs_r+0x58>
 80052c8:	462a      	mov	r2, r5
 80052ca:	f000 fbb1 	bl	8005a30 <_realloc_r>
 80052ce:	4606      	mov	r6, r0
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d1e1      	bne.n	8005298 <__ssputs_r+0x70>
 80052d4:	4650      	mov	r0, sl
 80052d6:	6921      	ldr	r1, [r4, #16]
 80052d8:	f000 face 	bl	8005878 <_free_r>
 80052dc:	e7c7      	b.n	800526e <__ssputs_r+0x46>
	...

080052e0 <_svfiprintf_r>:
 80052e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	4698      	mov	r8, r3
 80052e6:	898b      	ldrh	r3, [r1, #12]
 80052e8:	4607      	mov	r7, r0
 80052ea:	061b      	lsls	r3, r3, #24
 80052ec:	460d      	mov	r5, r1
 80052ee:	4614      	mov	r4, r2
 80052f0:	b09d      	sub	sp, #116	; 0x74
 80052f2:	d50e      	bpl.n	8005312 <_svfiprintf_r+0x32>
 80052f4:	690b      	ldr	r3, [r1, #16]
 80052f6:	b963      	cbnz	r3, 8005312 <_svfiprintf_r+0x32>
 80052f8:	2140      	movs	r1, #64	; 0x40
 80052fa:	f000 fb25 	bl	8005948 <_malloc_r>
 80052fe:	6028      	str	r0, [r5, #0]
 8005300:	6128      	str	r0, [r5, #16]
 8005302:	b920      	cbnz	r0, 800530e <_svfiprintf_r+0x2e>
 8005304:	230c      	movs	r3, #12
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
 800530c:	e0d1      	b.n	80054b2 <_svfiprintf_r+0x1d2>
 800530e:	2340      	movs	r3, #64	; 0x40
 8005310:	616b      	str	r3, [r5, #20]
 8005312:	2300      	movs	r3, #0
 8005314:	9309      	str	r3, [sp, #36]	; 0x24
 8005316:	2320      	movs	r3, #32
 8005318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800531c:	2330      	movs	r3, #48	; 0x30
 800531e:	f04f 0901 	mov.w	r9, #1
 8005322:	f8cd 800c 	str.w	r8, [sp, #12]
 8005326:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80054cc <_svfiprintf_r+0x1ec>
 800532a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800532e:	4623      	mov	r3, r4
 8005330:	469a      	mov	sl, r3
 8005332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005336:	b10a      	cbz	r2, 800533c <_svfiprintf_r+0x5c>
 8005338:	2a25      	cmp	r2, #37	; 0x25
 800533a:	d1f9      	bne.n	8005330 <_svfiprintf_r+0x50>
 800533c:	ebba 0b04 	subs.w	fp, sl, r4
 8005340:	d00b      	beq.n	800535a <_svfiprintf_r+0x7a>
 8005342:	465b      	mov	r3, fp
 8005344:	4622      	mov	r2, r4
 8005346:	4629      	mov	r1, r5
 8005348:	4638      	mov	r0, r7
 800534a:	f7ff ff6d 	bl	8005228 <__ssputs_r>
 800534e:	3001      	adds	r0, #1
 8005350:	f000 80aa 	beq.w	80054a8 <_svfiprintf_r+0x1c8>
 8005354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005356:	445a      	add	r2, fp
 8005358:	9209      	str	r2, [sp, #36]	; 0x24
 800535a:	f89a 3000 	ldrb.w	r3, [sl]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80a2 	beq.w	80054a8 <_svfiprintf_r+0x1c8>
 8005364:	2300      	movs	r3, #0
 8005366:	f04f 32ff 	mov.w	r2, #4294967295
 800536a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800536e:	f10a 0a01 	add.w	sl, sl, #1
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	9307      	str	r3, [sp, #28]
 8005376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800537a:	931a      	str	r3, [sp, #104]	; 0x68
 800537c:	4654      	mov	r4, sl
 800537e:	2205      	movs	r2, #5
 8005380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005384:	4851      	ldr	r0, [pc, #324]	; (80054cc <_svfiprintf_r+0x1ec>)
 8005386:	f000 fa41 	bl	800580c <memchr>
 800538a:	9a04      	ldr	r2, [sp, #16]
 800538c:	b9d8      	cbnz	r0, 80053c6 <_svfiprintf_r+0xe6>
 800538e:	06d0      	lsls	r0, r2, #27
 8005390:	bf44      	itt	mi
 8005392:	2320      	movmi	r3, #32
 8005394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005398:	0711      	lsls	r1, r2, #28
 800539a:	bf44      	itt	mi
 800539c:	232b      	movmi	r3, #43	; 0x2b
 800539e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053a2:	f89a 3000 	ldrb.w	r3, [sl]
 80053a6:	2b2a      	cmp	r3, #42	; 0x2a
 80053a8:	d015      	beq.n	80053d6 <_svfiprintf_r+0xf6>
 80053aa:	4654      	mov	r4, sl
 80053ac:	2000      	movs	r0, #0
 80053ae:	f04f 0c0a 	mov.w	ip, #10
 80053b2:	9a07      	ldr	r2, [sp, #28]
 80053b4:	4621      	mov	r1, r4
 80053b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ba:	3b30      	subs	r3, #48	; 0x30
 80053bc:	2b09      	cmp	r3, #9
 80053be:	d94e      	bls.n	800545e <_svfiprintf_r+0x17e>
 80053c0:	b1b0      	cbz	r0, 80053f0 <_svfiprintf_r+0x110>
 80053c2:	9207      	str	r2, [sp, #28]
 80053c4:	e014      	b.n	80053f0 <_svfiprintf_r+0x110>
 80053c6:	eba0 0308 	sub.w	r3, r0, r8
 80053ca:	fa09 f303 	lsl.w	r3, r9, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	46a2      	mov	sl, r4
 80053d2:	9304      	str	r3, [sp, #16]
 80053d4:	e7d2      	b.n	800537c <_svfiprintf_r+0x9c>
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	1d19      	adds	r1, r3, #4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	9103      	str	r1, [sp, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bfbb      	ittet	lt
 80053e2:	425b      	neglt	r3, r3
 80053e4:	f042 0202 	orrlt.w	r2, r2, #2
 80053e8:	9307      	strge	r3, [sp, #28]
 80053ea:	9307      	strlt	r3, [sp, #28]
 80053ec:	bfb8      	it	lt
 80053ee:	9204      	strlt	r2, [sp, #16]
 80053f0:	7823      	ldrb	r3, [r4, #0]
 80053f2:	2b2e      	cmp	r3, #46	; 0x2e
 80053f4:	d10c      	bne.n	8005410 <_svfiprintf_r+0x130>
 80053f6:	7863      	ldrb	r3, [r4, #1]
 80053f8:	2b2a      	cmp	r3, #42	; 0x2a
 80053fa:	d135      	bne.n	8005468 <_svfiprintf_r+0x188>
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	3402      	adds	r4, #2
 8005400:	1d1a      	adds	r2, r3, #4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	9203      	str	r2, [sp, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	bfb8      	it	lt
 800540a:	f04f 33ff 	movlt.w	r3, #4294967295
 800540e:	9305      	str	r3, [sp, #20]
 8005410:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80054d0 <_svfiprintf_r+0x1f0>
 8005414:	2203      	movs	r2, #3
 8005416:	4650      	mov	r0, sl
 8005418:	7821      	ldrb	r1, [r4, #0]
 800541a:	f000 f9f7 	bl	800580c <memchr>
 800541e:	b140      	cbz	r0, 8005432 <_svfiprintf_r+0x152>
 8005420:	2340      	movs	r3, #64	; 0x40
 8005422:	eba0 000a 	sub.w	r0, r0, sl
 8005426:	fa03 f000 	lsl.w	r0, r3, r0
 800542a:	9b04      	ldr	r3, [sp, #16]
 800542c:	3401      	adds	r4, #1
 800542e:	4303      	orrs	r3, r0
 8005430:	9304      	str	r3, [sp, #16]
 8005432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005436:	2206      	movs	r2, #6
 8005438:	4826      	ldr	r0, [pc, #152]	; (80054d4 <_svfiprintf_r+0x1f4>)
 800543a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800543e:	f000 f9e5 	bl	800580c <memchr>
 8005442:	2800      	cmp	r0, #0
 8005444:	d038      	beq.n	80054b8 <_svfiprintf_r+0x1d8>
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <_svfiprintf_r+0x1f8>)
 8005448:	bb1b      	cbnz	r3, 8005492 <_svfiprintf_r+0x1b2>
 800544a:	9b03      	ldr	r3, [sp, #12]
 800544c:	3307      	adds	r3, #7
 800544e:	f023 0307 	bic.w	r3, r3, #7
 8005452:	3308      	adds	r3, #8
 8005454:	9303      	str	r3, [sp, #12]
 8005456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005458:	4433      	add	r3, r6
 800545a:	9309      	str	r3, [sp, #36]	; 0x24
 800545c:	e767      	b.n	800532e <_svfiprintf_r+0x4e>
 800545e:	460c      	mov	r4, r1
 8005460:	2001      	movs	r0, #1
 8005462:	fb0c 3202 	mla	r2, ip, r2, r3
 8005466:	e7a5      	b.n	80053b4 <_svfiprintf_r+0xd4>
 8005468:	2300      	movs	r3, #0
 800546a:	f04f 0c0a 	mov.w	ip, #10
 800546e:	4619      	mov	r1, r3
 8005470:	3401      	adds	r4, #1
 8005472:	9305      	str	r3, [sp, #20]
 8005474:	4620      	mov	r0, r4
 8005476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800547a:	3a30      	subs	r2, #48	; 0x30
 800547c:	2a09      	cmp	r2, #9
 800547e:	d903      	bls.n	8005488 <_svfiprintf_r+0x1a8>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0c5      	beq.n	8005410 <_svfiprintf_r+0x130>
 8005484:	9105      	str	r1, [sp, #20]
 8005486:	e7c3      	b.n	8005410 <_svfiprintf_r+0x130>
 8005488:	4604      	mov	r4, r0
 800548a:	2301      	movs	r3, #1
 800548c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005490:	e7f0      	b.n	8005474 <_svfiprintf_r+0x194>
 8005492:	ab03      	add	r3, sp, #12
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	462a      	mov	r2, r5
 8005498:	4638      	mov	r0, r7
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <_svfiprintf_r+0x1fc>)
 800549c:	a904      	add	r1, sp, #16
 800549e:	f3af 8000 	nop.w
 80054a2:	1c42      	adds	r2, r0, #1
 80054a4:	4606      	mov	r6, r0
 80054a6:	d1d6      	bne.n	8005456 <_svfiprintf_r+0x176>
 80054a8:	89ab      	ldrh	r3, [r5, #12]
 80054aa:	065b      	lsls	r3, r3, #25
 80054ac:	f53f af2c 	bmi.w	8005308 <_svfiprintf_r+0x28>
 80054b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054b2:	b01d      	add	sp, #116	; 0x74
 80054b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b8:	ab03      	add	r3, sp, #12
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	462a      	mov	r2, r5
 80054be:	4638      	mov	r0, r7
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <_svfiprintf_r+0x1fc>)
 80054c2:	a904      	add	r1, sp, #16
 80054c4:	f000 f87c 	bl	80055c0 <_printf_i>
 80054c8:	e7eb      	b.n	80054a2 <_svfiprintf_r+0x1c2>
 80054ca:	bf00      	nop
 80054cc:	08005b9a 	.word	0x08005b9a
 80054d0:	08005ba0 	.word	0x08005ba0
 80054d4:	08005ba4 	.word	0x08005ba4
 80054d8:	00000000 	.word	0x00000000
 80054dc:	08005229 	.word	0x08005229

080054e0 <_printf_common>:
 80054e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e4:	4616      	mov	r6, r2
 80054e6:	4699      	mov	r9, r3
 80054e8:	688a      	ldr	r2, [r1, #8]
 80054ea:	690b      	ldr	r3, [r1, #16]
 80054ec:	4607      	mov	r7, r0
 80054ee:	4293      	cmp	r3, r2
 80054f0:	bfb8      	it	lt
 80054f2:	4613      	movlt	r3, r2
 80054f4:	6033      	str	r3, [r6, #0]
 80054f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054fa:	460c      	mov	r4, r1
 80054fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005500:	b10a      	cbz	r2, 8005506 <_printf_common+0x26>
 8005502:	3301      	adds	r3, #1
 8005504:	6033      	str	r3, [r6, #0]
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	0699      	lsls	r1, r3, #26
 800550a:	bf42      	ittt	mi
 800550c:	6833      	ldrmi	r3, [r6, #0]
 800550e:	3302      	addmi	r3, #2
 8005510:	6033      	strmi	r3, [r6, #0]
 8005512:	6825      	ldr	r5, [r4, #0]
 8005514:	f015 0506 	ands.w	r5, r5, #6
 8005518:	d106      	bne.n	8005528 <_printf_common+0x48>
 800551a:	f104 0a19 	add.w	sl, r4, #25
 800551e:	68e3      	ldr	r3, [r4, #12]
 8005520:	6832      	ldr	r2, [r6, #0]
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	42ab      	cmp	r3, r5
 8005526:	dc28      	bgt.n	800557a <_printf_common+0x9a>
 8005528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800552c:	1e13      	subs	r3, r2, #0
 800552e:	6822      	ldr	r2, [r4, #0]
 8005530:	bf18      	it	ne
 8005532:	2301      	movne	r3, #1
 8005534:	0692      	lsls	r2, r2, #26
 8005536:	d42d      	bmi.n	8005594 <_printf_common+0xb4>
 8005538:	4649      	mov	r1, r9
 800553a:	4638      	mov	r0, r7
 800553c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005540:	47c0      	blx	r8
 8005542:	3001      	adds	r0, #1
 8005544:	d020      	beq.n	8005588 <_printf_common+0xa8>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	68e5      	ldr	r5, [r4, #12]
 800554a:	f003 0306 	and.w	r3, r3, #6
 800554e:	2b04      	cmp	r3, #4
 8005550:	bf18      	it	ne
 8005552:	2500      	movne	r5, #0
 8005554:	6832      	ldr	r2, [r6, #0]
 8005556:	f04f 0600 	mov.w	r6, #0
 800555a:	68a3      	ldr	r3, [r4, #8]
 800555c:	bf08      	it	eq
 800555e:	1aad      	subeq	r5, r5, r2
 8005560:	6922      	ldr	r2, [r4, #16]
 8005562:	bf08      	it	eq
 8005564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005568:	4293      	cmp	r3, r2
 800556a:	bfc4      	itt	gt
 800556c:	1a9b      	subgt	r3, r3, r2
 800556e:	18ed      	addgt	r5, r5, r3
 8005570:	341a      	adds	r4, #26
 8005572:	42b5      	cmp	r5, r6
 8005574:	d11a      	bne.n	80055ac <_printf_common+0xcc>
 8005576:	2000      	movs	r0, #0
 8005578:	e008      	b.n	800558c <_printf_common+0xac>
 800557a:	2301      	movs	r3, #1
 800557c:	4652      	mov	r2, sl
 800557e:	4649      	mov	r1, r9
 8005580:	4638      	mov	r0, r7
 8005582:	47c0      	blx	r8
 8005584:	3001      	adds	r0, #1
 8005586:	d103      	bne.n	8005590 <_printf_common+0xb0>
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005590:	3501      	adds	r5, #1
 8005592:	e7c4      	b.n	800551e <_printf_common+0x3e>
 8005594:	2030      	movs	r0, #48	; 0x30
 8005596:	18e1      	adds	r1, r4, r3
 8005598:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055a2:	4422      	add	r2, r4
 80055a4:	3302      	adds	r3, #2
 80055a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055aa:	e7c5      	b.n	8005538 <_printf_common+0x58>
 80055ac:	2301      	movs	r3, #1
 80055ae:	4622      	mov	r2, r4
 80055b0:	4649      	mov	r1, r9
 80055b2:	4638      	mov	r0, r7
 80055b4:	47c0      	blx	r8
 80055b6:	3001      	adds	r0, #1
 80055b8:	d0e6      	beq.n	8005588 <_printf_common+0xa8>
 80055ba:	3601      	adds	r6, #1
 80055bc:	e7d9      	b.n	8005572 <_printf_common+0x92>
	...

080055c0 <_printf_i>:
 80055c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055c4:	7e0f      	ldrb	r7, [r1, #24]
 80055c6:	4691      	mov	r9, r2
 80055c8:	2f78      	cmp	r7, #120	; 0x78
 80055ca:	4680      	mov	r8, r0
 80055cc:	460c      	mov	r4, r1
 80055ce:	469a      	mov	sl, r3
 80055d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055d6:	d807      	bhi.n	80055e8 <_printf_i+0x28>
 80055d8:	2f62      	cmp	r7, #98	; 0x62
 80055da:	d80a      	bhi.n	80055f2 <_printf_i+0x32>
 80055dc:	2f00      	cmp	r7, #0
 80055de:	f000 80d9 	beq.w	8005794 <_printf_i+0x1d4>
 80055e2:	2f58      	cmp	r7, #88	; 0x58
 80055e4:	f000 80a4 	beq.w	8005730 <_printf_i+0x170>
 80055e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055f0:	e03a      	b.n	8005668 <_printf_i+0xa8>
 80055f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055f6:	2b15      	cmp	r3, #21
 80055f8:	d8f6      	bhi.n	80055e8 <_printf_i+0x28>
 80055fa:	a101      	add	r1, pc, #4	; (adr r1, 8005600 <_printf_i+0x40>)
 80055fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005600:	08005659 	.word	0x08005659
 8005604:	0800566d 	.word	0x0800566d
 8005608:	080055e9 	.word	0x080055e9
 800560c:	080055e9 	.word	0x080055e9
 8005610:	080055e9 	.word	0x080055e9
 8005614:	080055e9 	.word	0x080055e9
 8005618:	0800566d 	.word	0x0800566d
 800561c:	080055e9 	.word	0x080055e9
 8005620:	080055e9 	.word	0x080055e9
 8005624:	080055e9 	.word	0x080055e9
 8005628:	080055e9 	.word	0x080055e9
 800562c:	0800577b 	.word	0x0800577b
 8005630:	0800569d 	.word	0x0800569d
 8005634:	0800575d 	.word	0x0800575d
 8005638:	080055e9 	.word	0x080055e9
 800563c:	080055e9 	.word	0x080055e9
 8005640:	0800579d 	.word	0x0800579d
 8005644:	080055e9 	.word	0x080055e9
 8005648:	0800569d 	.word	0x0800569d
 800564c:	080055e9 	.word	0x080055e9
 8005650:	080055e9 	.word	0x080055e9
 8005654:	08005765 	.word	0x08005765
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	1d1a      	adds	r2, r3, #4
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	602a      	str	r2, [r5, #0]
 8005660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005668:	2301      	movs	r3, #1
 800566a:	e0a4      	b.n	80057b6 <_printf_i+0x1f6>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	6829      	ldr	r1, [r5, #0]
 8005670:	0606      	lsls	r6, r0, #24
 8005672:	f101 0304 	add.w	r3, r1, #4
 8005676:	d50a      	bpl.n	800568e <_printf_i+0xce>
 8005678:	680e      	ldr	r6, [r1, #0]
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	2e00      	cmp	r6, #0
 800567e:	da03      	bge.n	8005688 <_printf_i+0xc8>
 8005680:	232d      	movs	r3, #45	; 0x2d
 8005682:	4276      	negs	r6, r6
 8005684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005688:	230a      	movs	r3, #10
 800568a:	485e      	ldr	r0, [pc, #376]	; (8005804 <_printf_i+0x244>)
 800568c:	e019      	b.n	80056c2 <_printf_i+0x102>
 800568e:	680e      	ldr	r6, [r1, #0]
 8005690:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005694:	602b      	str	r3, [r5, #0]
 8005696:	bf18      	it	ne
 8005698:	b236      	sxthne	r6, r6
 800569a:	e7ef      	b.n	800567c <_printf_i+0xbc>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	6820      	ldr	r0, [r4, #0]
 80056a0:	1d19      	adds	r1, r3, #4
 80056a2:	6029      	str	r1, [r5, #0]
 80056a4:	0601      	lsls	r1, r0, #24
 80056a6:	d501      	bpl.n	80056ac <_printf_i+0xec>
 80056a8:	681e      	ldr	r6, [r3, #0]
 80056aa:	e002      	b.n	80056b2 <_printf_i+0xf2>
 80056ac:	0646      	lsls	r6, r0, #25
 80056ae:	d5fb      	bpl.n	80056a8 <_printf_i+0xe8>
 80056b0:	881e      	ldrh	r6, [r3, #0]
 80056b2:	2f6f      	cmp	r7, #111	; 0x6f
 80056b4:	bf0c      	ite	eq
 80056b6:	2308      	moveq	r3, #8
 80056b8:	230a      	movne	r3, #10
 80056ba:	4852      	ldr	r0, [pc, #328]	; (8005804 <_printf_i+0x244>)
 80056bc:	2100      	movs	r1, #0
 80056be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056c2:	6865      	ldr	r5, [r4, #4]
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	bfa8      	it	ge
 80056c8:	6821      	ldrge	r1, [r4, #0]
 80056ca:	60a5      	str	r5, [r4, #8]
 80056cc:	bfa4      	itt	ge
 80056ce:	f021 0104 	bicge.w	r1, r1, #4
 80056d2:	6021      	strge	r1, [r4, #0]
 80056d4:	b90e      	cbnz	r6, 80056da <_printf_i+0x11a>
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	d04d      	beq.n	8005776 <_printf_i+0x1b6>
 80056da:	4615      	mov	r5, r2
 80056dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80056e0:	fb03 6711 	mls	r7, r3, r1, r6
 80056e4:	5dc7      	ldrb	r7, [r0, r7]
 80056e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056ea:	4637      	mov	r7, r6
 80056ec:	42bb      	cmp	r3, r7
 80056ee:	460e      	mov	r6, r1
 80056f0:	d9f4      	bls.n	80056dc <_printf_i+0x11c>
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d10b      	bne.n	800570e <_printf_i+0x14e>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	07de      	lsls	r6, r3, #31
 80056fa:	d508      	bpl.n	800570e <_printf_i+0x14e>
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	6861      	ldr	r1, [r4, #4]
 8005700:	4299      	cmp	r1, r3
 8005702:	bfde      	ittt	le
 8005704:	2330      	movle	r3, #48	; 0x30
 8005706:	f805 3c01 	strble.w	r3, [r5, #-1]
 800570a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800570e:	1b52      	subs	r2, r2, r5
 8005710:	6122      	str	r2, [r4, #16]
 8005712:	464b      	mov	r3, r9
 8005714:	4621      	mov	r1, r4
 8005716:	4640      	mov	r0, r8
 8005718:	f8cd a000 	str.w	sl, [sp]
 800571c:	aa03      	add	r2, sp, #12
 800571e:	f7ff fedf 	bl	80054e0 <_printf_common>
 8005722:	3001      	adds	r0, #1
 8005724:	d14c      	bne.n	80057c0 <_printf_i+0x200>
 8005726:	f04f 30ff 	mov.w	r0, #4294967295
 800572a:	b004      	add	sp, #16
 800572c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005730:	4834      	ldr	r0, [pc, #208]	; (8005804 <_printf_i+0x244>)
 8005732:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005736:	6829      	ldr	r1, [r5, #0]
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	f851 6b04 	ldr.w	r6, [r1], #4
 800573e:	6029      	str	r1, [r5, #0]
 8005740:	061d      	lsls	r5, r3, #24
 8005742:	d514      	bpl.n	800576e <_printf_i+0x1ae>
 8005744:	07df      	lsls	r7, r3, #31
 8005746:	bf44      	itt	mi
 8005748:	f043 0320 	orrmi.w	r3, r3, #32
 800574c:	6023      	strmi	r3, [r4, #0]
 800574e:	b91e      	cbnz	r6, 8005758 <_printf_i+0x198>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	f023 0320 	bic.w	r3, r3, #32
 8005756:	6023      	str	r3, [r4, #0]
 8005758:	2310      	movs	r3, #16
 800575a:	e7af      	b.n	80056bc <_printf_i+0xfc>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	f043 0320 	orr.w	r3, r3, #32
 8005762:	6023      	str	r3, [r4, #0]
 8005764:	2378      	movs	r3, #120	; 0x78
 8005766:	4828      	ldr	r0, [pc, #160]	; (8005808 <_printf_i+0x248>)
 8005768:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800576c:	e7e3      	b.n	8005736 <_printf_i+0x176>
 800576e:	0659      	lsls	r1, r3, #25
 8005770:	bf48      	it	mi
 8005772:	b2b6      	uxthmi	r6, r6
 8005774:	e7e6      	b.n	8005744 <_printf_i+0x184>
 8005776:	4615      	mov	r5, r2
 8005778:	e7bb      	b.n	80056f2 <_printf_i+0x132>
 800577a:	682b      	ldr	r3, [r5, #0]
 800577c:	6826      	ldr	r6, [r4, #0]
 800577e:	1d18      	adds	r0, r3, #4
 8005780:	6961      	ldr	r1, [r4, #20]
 8005782:	6028      	str	r0, [r5, #0]
 8005784:	0635      	lsls	r5, r6, #24
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	d501      	bpl.n	800578e <_printf_i+0x1ce>
 800578a:	6019      	str	r1, [r3, #0]
 800578c:	e002      	b.n	8005794 <_printf_i+0x1d4>
 800578e:	0670      	lsls	r0, r6, #25
 8005790:	d5fb      	bpl.n	800578a <_printf_i+0x1ca>
 8005792:	8019      	strh	r1, [r3, #0]
 8005794:	2300      	movs	r3, #0
 8005796:	4615      	mov	r5, r2
 8005798:	6123      	str	r3, [r4, #16]
 800579a:	e7ba      	b.n	8005712 <_printf_i+0x152>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	2100      	movs	r1, #0
 80057a0:	1d1a      	adds	r2, r3, #4
 80057a2:	602a      	str	r2, [r5, #0]
 80057a4:	681d      	ldr	r5, [r3, #0]
 80057a6:	6862      	ldr	r2, [r4, #4]
 80057a8:	4628      	mov	r0, r5
 80057aa:	f000 f82f 	bl	800580c <memchr>
 80057ae:	b108      	cbz	r0, 80057b4 <_printf_i+0x1f4>
 80057b0:	1b40      	subs	r0, r0, r5
 80057b2:	6060      	str	r0, [r4, #4]
 80057b4:	6863      	ldr	r3, [r4, #4]
 80057b6:	6123      	str	r3, [r4, #16]
 80057b8:	2300      	movs	r3, #0
 80057ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057be:	e7a8      	b.n	8005712 <_printf_i+0x152>
 80057c0:	462a      	mov	r2, r5
 80057c2:	4649      	mov	r1, r9
 80057c4:	4640      	mov	r0, r8
 80057c6:	6923      	ldr	r3, [r4, #16]
 80057c8:	47d0      	blx	sl
 80057ca:	3001      	adds	r0, #1
 80057cc:	d0ab      	beq.n	8005726 <_printf_i+0x166>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	079b      	lsls	r3, r3, #30
 80057d2:	d413      	bmi.n	80057fc <_printf_i+0x23c>
 80057d4:	68e0      	ldr	r0, [r4, #12]
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	4298      	cmp	r0, r3
 80057da:	bfb8      	it	lt
 80057dc:	4618      	movlt	r0, r3
 80057de:	e7a4      	b.n	800572a <_printf_i+0x16a>
 80057e0:	2301      	movs	r3, #1
 80057e2:	4632      	mov	r2, r6
 80057e4:	4649      	mov	r1, r9
 80057e6:	4640      	mov	r0, r8
 80057e8:	47d0      	blx	sl
 80057ea:	3001      	adds	r0, #1
 80057ec:	d09b      	beq.n	8005726 <_printf_i+0x166>
 80057ee:	3501      	adds	r5, #1
 80057f0:	68e3      	ldr	r3, [r4, #12]
 80057f2:	9903      	ldr	r1, [sp, #12]
 80057f4:	1a5b      	subs	r3, r3, r1
 80057f6:	42ab      	cmp	r3, r5
 80057f8:	dcf2      	bgt.n	80057e0 <_printf_i+0x220>
 80057fa:	e7eb      	b.n	80057d4 <_printf_i+0x214>
 80057fc:	2500      	movs	r5, #0
 80057fe:	f104 0619 	add.w	r6, r4, #25
 8005802:	e7f5      	b.n	80057f0 <_printf_i+0x230>
 8005804:	08005bab 	.word	0x08005bab
 8005808:	08005bbc 	.word	0x08005bbc

0800580c <memchr>:
 800580c:	4603      	mov	r3, r0
 800580e:	b510      	push	{r4, lr}
 8005810:	b2c9      	uxtb	r1, r1
 8005812:	4402      	add	r2, r0
 8005814:	4293      	cmp	r3, r2
 8005816:	4618      	mov	r0, r3
 8005818:	d101      	bne.n	800581e <memchr+0x12>
 800581a:	2000      	movs	r0, #0
 800581c:	e003      	b.n	8005826 <memchr+0x1a>
 800581e:	7804      	ldrb	r4, [r0, #0]
 8005820:	3301      	adds	r3, #1
 8005822:	428c      	cmp	r4, r1
 8005824:	d1f6      	bne.n	8005814 <memchr+0x8>
 8005826:	bd10      	pop	{r4, pc}

08005828 <memcpy>:
 8005828:	440a      	add	r2, r1
 800582a:	4291      	cmp	r1, r2
 800582c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005830:	d100      	bne.n	8005834 <memcpy+0xc>
 8005832:	4770      	bx	lr
 8005834:	b510      	push	{r4, lr}
 8005836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800583a:	4291      	cmp	r1, r2
 800583c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005840:	d1f9      	bne.n	8005836 <memcpy+0xe>
 8005842:	bd10      	pop	{r4, pc}

08005844 <memmove>:
 8005844:	4288      	cmp	r0, r1
 8005846:	b510      	push	{r4, lr}
 8005848:	eb01 0402 	add.w	r4, r1, r2
 800584c:	d902      	bls.n	8005854 <memmove+0x10>
 800584e:	4284      	cmp	r4, r0
 8005850:	4623      	mov	r3, r4
 8005852:	d807      	bhi.n	8005864 <memmove+0x20>
 8005854:	1e43      	subs	r3, r0, #1
 8005856:	42a1      	cmp	r1, r4
 8005858:	d008      	beq.n	800586c <memmove+0x28>
 800585a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800585e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005862:	e7f8      	b.n	8005856 <memmove+0x12>
 8005864:	4601      	mov	r1, r0
 8005866:	4402      	add	r2, r0
 8005868:	428a      	cmp	r2, r1
 800586a:	d100      	bne.n	800586e <memmove+0x2a>
 800586c:	bd10      	pop	{r4, pc}
 800586e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005876:	e7f7      	b.n	8005868 <memmove+0x24>

08005878 <_free_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4605      	mov	r5, r0
 800587c:	2900      	cmp	r1, #0
 800587e:	d040      	beq.n	8005902 <_free_r+0x8a>
 8005880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005884:	1f0c      	subs	r4, r1, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	bfb8      	it	lt
 800588a:	18e4      	addlt	r4, r4, r3
 800588c:	f000 f910 	bl	8005ab0 <__malloc_lock>
 8005890:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <_free_r+0x8c>)
 8005892:	6813      	ldr	r3, [r2, #0]
 8005894:	b933      	cbnz	r3, 80058a4 <_free_r+0x2c>
 8005896:	6063      	str	r3, [r4, #4]
 8005898:	6014      	str	r4, [r2, #0]
 800589a:	4628      	mov	r0, r5
 800589c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058a0:	f000 b90c 	b.w	8005abc <__malloc_unlock>
 80058a4:	42a3      	cmp	r3, r4
 80058a6:	d908      	bls.n	80058ba <_free_r+0x42>
 80058a8:	6820      	ldr	r0, [r4, #0]
 80058aa:	1821      	adds	r1, r4, r0
 80058ac:	428b      	cmp	r3, r1
 80058ae:	bf01      	itttt	eq
 80058b0:	6819      	ldreq	r1, [r3, #0]
 80058b2:	685b      	ldreq	r3, [r3, #4]
 80058b4:	1809      	addeq	r1, r1, r0
 80058b6:	6021      	streq	r1, [r4, #0]
 80058b8:	e7ed      	b.n	8005896 <_free_r+0x1e>
 80058ba:	461a      	mov	r2, r3
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	b10b      	cbz	r3, 80058c4 <_free_r+0x4c>
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	d9fa      	bls.n	80058ba <_free_r+0x42>
 80058c4:	6811      	ldr	r1, [r2, #0]
 80058c6:	1850      	adds	r0, r2, r1
 80058c8:	42a0      	cmp	r0, r4
 80058ca:	d10b      	bne.n	80058e4 <_free_r+0x6c>
 80058cc:	6820      	ldr	r0, [r4, #0]
 80058ce:	4401      	add	r1, r0
 80058d0:	1850      	adds	r0, r2, r1
 80058d2:	4283      	cmp	r3, r0
 80058d4:	6011      	str	r1, [r2, #0]
 80058d6:	d1e0      	bne.n	800589a <_free_r+0x22>
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	4401      	add	r1, r0
 80058de:	6011      	str	r1, [r2, #0]
 80058e0:	6053      	str	r3, [r2, #4]
 80058e2:	e7da      	b.n	800589a <_free_r+0x22>
 80058e4:	d902      	bls.n	80058ec <_free_r+0x74>
 80058e6:	230c      	movs	r3, #12
 80058e8:	602b      	str	r3, [r5, #0]
 80058ea:	e7d6      	b.n	800589a <_free_r+0x22>
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	1821      	adds	r1, r4, r0
 80058f0:	428b      	cmp	r3, r1
 80058f2:	bf01      	itttt	eq
 80058f4:	6819      	ldreq	r1, [r3, #0]
 80058f6:	685b      	ldreq	r3, [r3, #4]
 80058f8:	1809      	addeq	r1, r1, r0
 80058fa:	6021      	streq	r1, [r4, #0]
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	6054      	str	r4, [r2, #4]
 8005900:	e7cb      	b.n	800589a <_free_r+0x22>
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	20000214 	.word	0x20000214

08005908 <sbrk_aligned>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	4e0e      	ldr	r6, [pc, #56]	; (8005944 <sbrk_aligned+0x3c>)
 800590c:	460c      	mov	r4, r1
 800590e:	6831      	ldr	r1, [r6, #0]
 8005910:	4605      	mov	r5, r0
 8005912:	b911      	cbnz	r1, 800591a <sbrk_aligned+0x12>
 8005914:	f000 f8bc 	bl	8005a90 <_sbrk_r>
 8005918:	6030      	str	r0, [r6, #0]
 800591a:	4621      	mov	r1, r4
 800591c:	4628      	mov	r0, r5
 800591e:	f000 f8b7 	bl	8005a90 <_sbrk_r>
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	d00a      	beq.n	800593c <sbrk_aligned+0x34>
 8005926:	1cc4      	adds	r4, r0, #3
 8005928:	f024 0403 	bic.w	r4, r4, #3
 800592c:	42a0      	cmp	r0, r4
 800592e:	d007      	beq.n	8005940 <sbrk_aligned+0x38>
 8005930:	1a21      	subs	r1, r4, r0
 8005932:	4628      	mov	r0, r5
 8005934:	f000 f8ac 	bl	8005a90 <_sbrk_r>
 8005938:	3001      	adds	r0, #1
 800593a:	d101      	bne.n	8005940 <sbrk_aligned+0x38>
 800593c:	f04f 34ff 	mov.w	r4, #4294967295
 8005940:	4620      	mov	r0, r4
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	20000218 	.word	0x20000218

08005948 <_malloc_r>:
 8005948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594c:	1ccd      	adds	r5, r1, #3
 800594e:	f025 0503 	bic.w	r5, r5, #3
 8005952:	3508      	adds	r5, #8
 8005954:	2d0c      	cmp	r5, #12
 8005956:	bf38      	it	cc
 8005958:	250c      	movcc	r5, #12
 800595a:	2d00      	cmp	r5, #0
 800595c:	4607      	mov	r7, r0
 800595e:	db01      	blt.n	8005964 <_malloc_r+0x1c>
 8005960:	42a9      	cmp	r1, r5
 8005962:	d905      	bls.n	8005970 <_malloc_r+0x28>
 8005964:	230c      	movs	r3, #12
 8005966:	2600      	movs	r6, #0
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4630      	mov	r0, r6
 800596c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005970:	4e2e      	ldr	r6, [pc, #184]	; (8005a2c <_malloc_r+0xe4>)
 8005972:	f000 f89d 	bl	8005ab0 <__malloc_lock>
 8005976:	6833      	ldr	r3, [r6, #0]
 8005978:	461c      	mov	r4, r3
 800597a:	bb34      	cbnz	r4, 80059ca <_malloc_r+0x82>
 800597c:	4629      	mov	r1, r5
 800597e:	4638      	mov	r0, r7
 8005980:	f7ff ffc2 	bl	8005908 <sbrk_aligned>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	4604      	mov	r4, r0
 8005988:	d14d      	bne.n	8005a26 <_malloc_r+0xde>
 800598a:	6834      	ldr	r4, [r6, #0]
 800598c:	4626      	mov	r6, r4
 800598e:	2e00      	cmp	r6, #0
 8005990:	d140      	bne.n	8005a14 <_malloc_r+0xcc>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	4631      	mov	r1, r6
 8005996:	4638      	mov	r0, r7
 8005998:	eb04 0803 	add.w	r8, r4, r3
 800599c:	f000 f878 	bl	8005a90 <_sbrk_r>
 80059a0:	4580      	cmp	r8, r0
 80059a2:	d13a      	bne.n	8005a1a <_malloc_r+0xd2>
 80059a4:	6821      	ldr	r1, [r4, #0]
 80059a6:	3503      	adds	r5, #3
 80059a8:	1a6d      	subs	r5, r5, r1
 80059aa:	f025 0503 	bic.w	r5, r5, #3
 80059ae:	3508      	adds	r5, #8
 80059b0:	2d0c      	cmp	r5, #12
 80059b2:	bf38      	it	cc
 80059b4:	250c      	movcc	r5, #12
 80059b6:	4638      	mov	r0, r7
 80059b8:	4629      	mov	r1, r5
 80059ba:	f7ff ffa5 	bl	8005908 <sbrk_aligned>
 80059be:	3001      	adds	r0, #1
 80059c0:	d02b      	beq.n	8005a1a <_malloc_r+0xd2>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	442b      	add	r3, r5
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	e00e      	b.n	80059e8 <_malloc_r+0xa0>
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	1b52      	subs	r2, r2, r5
 80059ce:	d41e      	bmi.n	8005a0e <_malloc_r+0xc6>
 80059d0:	2a0b      	cmp	r2, #11
 80059d2:	d916      	bls.n	8005a02 <_malloc_r+0xba>
 80059d4:	1961      	adds	r1, r4, r5
 80059d6:	42a3      	cmp	r3, r4
 80059d8:	6025      	str	r5, [r4, #0]
 80059da:	bf18      	it	ne
 80059dc:	6059      	strne	r1, [r3, #4]
 80059de:	6863      	ldr	r3, [r4, #4]
 80059e0:	bf08      	it	eq
 80059e2:	6031      	streq	r1, [r6, #0]
 80059e4:	5162      	str	r2, [r4, r5]
 80059e6:	604b      	str	r3, [r1, #4]
 80059e8:	4638      	mov	r0, r7
 80059ea:	f104 060b 	add.w	r6, r4, #11
 80059ee:	f000 f865 	bl	8005abc <__malloc_unlock>
 80059f2:	f026 0607 	bic.w	r6, r6, #7
 80059f6:	1d23      	adds	r3, r4, #4
 80059f8:	1af2      	subs	r2, r6, r3
 80059fa:	d0b6      	beq.n	800596a <_malloc_r+0x22>
 80059fc:	1b9b      	subs	r3, r3, r6
 80059fe:	50a3      	str	r3, [r4, r2]
 8005a00:	e7b3      	b.n	800596a <_malloc_r+0x22>
 8005a02:	6862      	ldr	r2, [r4, #4]
 8005a04:	42a3      	cmp	r3, r4
 8005a06:	bf0c      	ite	eq
 8005a08:	6032      	streq	r2, [r6, #0]
 8005a0a:	605a      	strne	r2, [r3, #4]
 8005a0c:	e7ec      	b.n	80059e8 <_malloc_r+0xa0>
 8005a0e:	4623      	mov	r3, r4
 8005a10:	6864      	ldr	r4, [r4, #4]
 8005a12:	e7b2      	b.n	800597a <_malloc_r+0x32>
 8005a14:	4634      	mov	r4, r6
 8005a16:	6876      	ldr	r6, [r6, #4]
 8005a18:	e7b9      	b.n	800598e <_malloc_r+0x46>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	f000 f84c 	bl	8005abc <__malloc_unlock>
 8005a24:	e7a1      	b.n	800596a <_malloc_r+0x22>
 8005a26:	6025      	str	r5, [r4, #0]
 8005a28:	e7de      	b.n	80059e8 <_malloc_r+0xa0>
 8005a2a:	bf00      	nop
 8005a2c:	20000214 	.word	0x20000214

08005a30 <_realloc_r>:
 8005a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a34:	4680      	mov	r8, r0
 8005a36:	4614      	mov	r4, r2
 8005a38:	460e      	mov	r6, r1
 8005a3a:	b921      	cbnz	r1, 8005a46 <_realloc_r+0x16>
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a42:	f7ff bf81 	b.w	8005948 <_malloc_r>
 8005a46:	b92a      	cbnz	r2, 8005a54 <_realloc_r+0x24>
 8005a48:	f7ff ff16 	bl	8005878 <_free_r>
 8005a4c:	4625      	mov	r5, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a54:	f000 f838 	bl	8005ac8 <_malloc_usable_size_r>
 8005a58:	4284      	cmp	r4, r0
 8005a5a:	4607      	mov	r7, r0
 8005a5c:	d802      	bhi.n	8005a64 <_realloc_r+0x34>
 8005a5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a62:	d812      	bhi.n	8005a8a <_realloc_r+0x5a>
 8005a64:	4621      	mov	r1, r4
 8005a66:	4640      	mov	r0, r8
 8005a68:	f7ff ff6e 	bl	8005948 <_malloc_r>
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d0ed      	beq.n	8005a4e <_realloc_r+0x1e>
 8005a72:	42bc      	cmp	r4, r7
 8005a74:	4622      	mov	r2, r4
 8005a76:	4631      	mov	r1, r6
 8005a78:	bf28      	it	cs
 8005a7a:	463a      	movcs	r2, r7
 8005a7c:	f7ff fed4 	bl	8005828 <memcpy>
 8005a80:	4631      	mov	r1, r6
 8005a82:	4640      	mov	r0, r8
 8005a84:	f7ff fef8 	bl	8005878 <_free_r>
 8005a88:	e7e1      	b.n	8005a4e <_realloc_r+0x1e>
 8005a8a:	4635      	mov	r5, r6
 8005a8c:	e7df      	b.n	8005a4e <_realloc_r+0x1e>
	...

08005a90 <_sbrk_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	2300      	movs	r3, #0
 8005a94:	4d05      	ldr	r5, [pc, #20]	; (8005aac <_sbrk_r+0x1c>)
 8005a96:	4604      	mov	r4, r0
 8005a98:	4608      	mov	r0, r1
 8005a9a:	602b      	str	r3, [r5, #0]
 8005a9c:	f7fb fca6 	bl	80013ec <_sbrk>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d102      	bne.n	8005aaa <_sbrk_r+0x1a>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	b103      	cbz	r3, 8005aaa <_sbrk_r+0x1a>
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	2000021c 	.word	0x2000021c

08005ab0 <__malloc_lock>:
 8005ab0:	4801      	ldr	r0, [pc, #4]	; (8005ab8 <__malloc_lock+0x8>)
 8005ab2:	f000 b811 	b.w	8005ad8 <__retarget_lock_acquire_recursive>
 8005ab6:	bf00      	nop
 8005ab8:	20000220 	.word	0x20000220

08005abc <__malloc_unlock>:
 8005abc:	4801      	ldr	r0, [pc, #4]	; (8005ac4 <__malloc_unlock+0x8>)
 8005abe:	f000 b80c 	b.w	8005ada <__retarget_lock_release_recursive>
 8005ac2:	bf00      	nop
 8005ac4:	20000220 	.word	0x20000220

08005ac8 <_malloc_usable_size_r>:
 8005ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005acc:	1f18      	subs	r0, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bfbc      	itt	lt
 8005ad2:	580b      	ldrlt	r3, [r1, r0]
 8005ad4:	18c0      	addlt	r0, r0, r3
 8005ad6:	4770      	bx	lr

08005ad8 <__retarget_lock_acquire_recursive>:
 8005ad8:	4770      	bx	lr

08005ada <__retarget_lock_release_recursive>:
 8005ada:	4770      	bx	lr

08005adc <_init>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	bf00      	nop
 8005ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae2:	bc08      	pop	{r3}
 8005ae4:	469e      	mov	lr, r3
 8005ae6:	4770      	bx	lr

08005ae8 <_fini>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr
